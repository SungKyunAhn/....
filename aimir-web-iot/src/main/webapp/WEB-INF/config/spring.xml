<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">
        
    <!--<context:property-placeholder location="command.properties"/>-->
	<context:property-placeholder location="classpath:jdbc.properties" order="1" ignore-unresolvable="true"/>
	<context:property-placeholder location="classpath:iot.jdbc.properties" order="2" ignore-unresolvable="true"/>

    <bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
        <property name="poolName" value="springHikariCP" />
        <property name="dataSourceClassName" value="${jdbc.driverClassName}" />
        <property name="maximumPoolSize" value="${jdbc.maximumSize}" />
        <property name="minimumIdle" value="${jdbc.minimumIdleSize}"/>
        <property name="idleTimeout" value="30000" />
    
        <property name="dataSourceProperties">
            <props>
                <prop key="url">${jdbc.url}</prop>
                <prop key="user">${jdbc.username}</prop>
                <prop key="password">${jdbc.password}</prop>
            </props>
        </property>
    </bean>
    
    <!-- HikariCP configuration -->
    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <constructor-arg ref="hikariConfig" />
    </bean>
    
    <!-- Necessary to get the entity manager injected into the factory bean -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
    
    <bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
      <!-- <property name="databasePlatform" value="org.eclipse.persistence.platform.database.DerbyPlatform" /> -->
      <property name="databasePlatform" value="org.eclipse.persistence.platform.database.OraclePlatform" />
      <property name="showSql" value="true" />
    </bean>
  
    <!-- Entity Manager Factory  -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
      <!-- <property name="persistenceXmlLocation" value="classpath:config/persistence.xml" />
      <property name="jpaDialect" ref="jpaDialect" />-->
      <property name="dataSource" ref="dataSource" />
      <property name="packagesToScan" value="com.aimir.model, com.aimir.cms.model"/>
      <property name="jpaVendorAdapter">
        <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
      </property>
      <property name="jpaProperties">
        <props>
          <prop key="hibernate.dialect">${hibernate.dialect}</prop>
          <!--  <prop key="hibernate.default_schema">${jdbc.username}</prop>oracle only-->
          <prop key="hibernate.format_sql">true</prop>
          <prop key="hibernate.show_sql">false</prop>
          <prop key="hibernate.bytecode.use_reflection_optimizer">true</prop>
          <prop key="hibernate.use_sql_comments">false</prop>
          <!--<prop key="hibernate.hbm2ddl.auto">create-drop</prop>-->
          <!--<prop key="hibernate.hbm2ddl.auto">create</prop>-->
          <!--<prop key="hibernate.hbm2ddl.auto">validate</prop>-->
          <prop key="hibernate.hbm2ddl.auto">none</prop>
          <prop key="hibernate.connection.autocommit">false</prop>
          <!-- 0:none, 1:read_uncommitted, 2:read_committed, 4:repeatable_read, 8:serializable -->
          <prop key="hibernate.connection.isolation">1</prop>
          <!--<prop key="hibernate.query.substitutions">Y</prop>-->
          <!--<prop key="hibernate.cache.use_second_level_cache">true</prop>-->
          <!--<prop key="hibernate.cache.use_second_level_cache">org.hibernate.cache.EhCacheProvider</prop>-->
          <!-- Turn batching off for better error messages under PostgreSQL>-->
          <!--prop key="hibernate.jdbc.batch_size">0</prop-->
        </props>
      </property>
    </bean>
  
    <!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>
    
    <bean id="persistenceExceptionTranslationPostProcessor"
      class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
      
    <bean id="sessionContextFactory" class="org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean">
    	<property name="targetBeanName" value="sessionContext" />
    </bean>
    
    <!-- Activates scanning of @Autowired -->            
    <context:annotation-config/>

    <!-- Scans for @Repository, @Service -->
    <context:component-scan base-package="com.aimir">
        <context:exclude-filter type="regex" expression="com\.aimir\.fep\..*"/>
        <context:exclude-filter type="assignable" expression="com.aimir.cms.App"/>
    </context:component-scan>
    
    <!-- Enable @Transactional support -->
    <tx:annotation-driven />

    <!-- Enable @AspectJ support -->
    <aop:aspectj-autoproxy/>
    
    <!--  MBeans Server
    <bean id="mbeanServer" class="org.springframework.jmx.support.MBeanServerFactoryBean"/>
    
    this bean needs to be eagerly pre-instantiated in order for the exporting to occur;
    this means that it must not be marked as lazily initialized
    
    <bean id="mbeanExporter" class="org.springframework.jmx.export.MBeanExporter">
        <property name="server" ref="mbeanServer"/>
    </bean>
    
    <bean id="registry" class="org.springframework.remoting.rmi.RmiRegistryFactoryBean">
        <property name="port" value="${jmxrmi.server.port}"/>
    </bean>
     -->
     
    <!-- 
    <bean id="serverConnector" class="org.springframework.jmx.support.ConnectorServerFactoryBean">
        <property name="server" ref="mbeanServer"/>
        <property name="objectName" value="connector:name=rmi"/>
        <property name="serviceUrl" value="service:jmx:rmi://localhost/jndi/rmi://127.0.0.1:2199/server"/>
    </bean>
     -->
     
    <!-- <bean id="meterEventLink" class="com.aimir.fep.meter.link.BulkMeterEventLink"></bean> -->
    
    <!-- MQTT 주석
    <bean id="mqttClient" class="com.aimir.mqtt.MqttClientUtil">
        <constructor-arg index = "0">
            <value>${mosquitto.url}</value>
        </constructor-arg>
        <constructor-arg index = "1">
            <value>${mosquitto.value}</value>
        </constructor-arg>
    </bean> -->

</beans>