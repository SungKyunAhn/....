package com.aimir.cms.dao;


import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.transform.Transformers;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.aimir.cms.model.DebtLog;
import com.aimir.dao.AbstractHibernateGenericDao;
import com.aimir.util.StringUtil;

@Repository(value="debtLogDao")
public class DebtLogDaoImpl extends AbstractHibernateGenericDao<DebtLog, Integer> implements DebtLogDao{
	
	Log logger = LogFactory.getLog(DebtLogDaoImpl.class);
    
	@Override
	public List<Map<String, Object>> getDebtArrearsLog(Long prepaymentLogId) {
		StringBuffer sb = new StringBuffer();
		sb.append("\nSELECT dl.debt_Type as TYPE, ");
		sb.append("\n		dl.chargedDebt as CHARGED, ");
		sb.append("\n		dl.debt as AMOUNT, ");
		sb.append("\n		dl.partpayInfo as PARTPAYINFO ");
		sb.append("\nFROM   DebtLog dl ");
		sb.append("\nWHERE	dl.prepaymentLog_id = :prepaymentLogId ");
		sb.append("\nUNION ");
		sb.append("\nSELECT 'Arrears' as TYPE, ");
		sb.append("\n		p.chargedArrears as CHARGED, ");
		sb.append("\n		p.arrears as AMOUNT, ");
		sb.append("\n	    p.partpayInfo as PARTPAYINFO");
		sb.append("\nFROM	prepaymentlog p");
		sb.append("\nWHERE	p.id = :prepaymentLogId ");
		SQLQuery query = null;
		query = getSession().createSQLQuery(sb.toString());
		
		query.setLong("prepaymentLogId", prepaymentLogId);
		return query.setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list();
	}

	public List<DebtLog> getDebtLog(Long prepaymentLogId) {
		StringBuffer sb = new StringBuffer();
		sb.append("FROM DebtLog ");
		sb.append("WHERE prepaymentLogId = :prepaymentLogId");
		
		Query query = getSession().createQuery(sb.toString());
		query.setLong("prepaymentLogId",prepaymentLogId);
		return query.list();
	}
	
	@Override
	public Map<String, Object> getPrepaymentLogWithDebt(Long prepaymentLogId) {
		StringBuffer sb = new StringBuffer();
		sb.append("\nSELECT p.id as ID, ");
		sb.append("\n		o.id as OPERATORID, ");
		sb.append("\n		o.name as OPERATORNAME,");
		sb.append("\n		ol.name as OPERATORL, ");
		sb.append("\n		p.chargedCredit as CHARGEDCREDIT, ");
		sb.append("\n		p.chargedArrears as CHARGEDARREARS, ");
		sb.append("\n		p.Arrears as ARREARS, ");
		sb.append("\n		p.DAYS_FROM_CHARGE as DAYSFROMCHARGE, ");
		sb.append("\n		cu.id as CUSTID, ");
		sb.append("\n		cu.name as CUSTOMERNAME, ");
		sb.append("\n		cu.customerNo as CUSTOMERNO, ");
		sb.append("\n		p.lastTokenDate as LASTTOKENDATE, ");
		sb.append("\n		m.id as METERID, ");
		sb.append("\n		m.mds_id as MDSID, ");
		sb.append("\n		m.INSTALL_PROPERTY as INSTALLPROPERTY, ");
		sb.append("\n		t.id as TARIFFID,");
		sb.append("\n		t.name as TARIFFNAME,");
		sb.append("\n		vc.id as VCID, ");
		sb.append("\n		vc.CASHERID as CASHERID, ");
		sb.append("\n		vc.name as CASHERNAME, ");
		sb.append("\n		cu.address as ADDRESS, ");
		sb.append("\n		c.contract_Number as CONTRACTNUMBER, ");
		sb.append("\n		cl.name as CONTRACTL, ");
		sb.append("\n		pt.DESCR as PAYTYPE, ");
		sb.append("\n		p.vendorCasher_id as VENDORCHASER_ID, ");
		sb.append("\n		p.customer_id as CUSTOMERID, ");
		// sb.append("\n		p.lastTokenDate as LASTTOKENDATE, ");
		sb.append("\n		p.balance as BALANCE, ");
		sb.append("\n		p.PRE_BALANCE as PREBALANCE,  ");
		// sb.append("\n		p.lastTokenDate as LASTTOKENDATE, ");
		sb.append("\n		p.PRE_ARREARS as PREARREARS, ");
		sb.append("\n		p.INIT_CREDIT as INITCREDIT, ");
		sb.append("\n		p.TOKEN as TOKEN, ");
		sb.append("\n		p.CANCEL_TOKEN as CANCELTOKEN, ");
		sb.append("\n		d.debtSum as DEBTSUM, ");
		sb.append("\n		d.chargedDebtSum as CHARGEDDEBTSUM, ");
		sb.append("\n		d.preDebtSum as PREDEBTSUM ");
		sb.append("\nFROM PREPAYMENTLOG p ");
		sb.append("\n		left outer join ");
		sb.append("\n		(select prepaymentlog_id, sum(DEBT) as debtSum, sum(PRE_DEBT) as preDebtSum, sum(CHARGEDDEBT) as chargedDebtSum from DEBTLOG group by prepaymentlog_id) d ");
		sb.append("\n		on (p.id=d.prepaymentLog_id) ");
		sb.append("\n		left outer join CODE pt on(p.PAY_TYPE_CODE=pt.ID) ");
		sb.append("\n		left outer join CONTRACT c on(p.CONTRACT_ID=c.ID)  ");
		sb.append("\n		left outer join CUSTOMER cu on(c.CUSTOMER_ID=cu.ID) ");
		sb.append("\n		left outer join LOCATION cl on(c.LOCATION_ID=cl.ID) ");
		sb.append("\n		left outer join METER m on(c.METER_ID=m.ID) ");
		sb.append("\n		left outer join TARIFFTYPE t on(p.TARIFFINDEX_ID=t.ID) ");
		sb.append("\n		left outer join VENDOR_CASHER vc on(p.VENDORCASHER_ID=vc.ID) ");
		sb.append("\n		left outer join OPERATOR o on(p.OPERATOR_ID=o.ID) ");
		sb.append("\n		left outer join LOCATION ol on(o.LOCATION_ID=ol.ID) ");
		sb.append("\nWHERE	p.id=:prepaymentLogId ");
		
		SQLQuery query = null;
		query = getSession().createSQLQuery(sb.toString());
		
		query.setLong("prepaymentLogId", prepaymentLogId);
		
		List result = query.setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list();
		
		if(result.size() > 0) {
			return (Map<String, Object>)result.get(0);
		} else {
			return null;
		}
	}
	
    /**
     * method name : getDepositHistoryList<b/>
     * method Desc : Deposit History List 를 조회한다.
     *
     * @param params
     * @return
     */
    @SuppressWarnings("unchecked")
    @Transactional(value = "transactionManager", propagation=Propagation.REQUIRES_NEW)
    public Map<String, Object> getDepositHistoryList(Map<String, Object> params) {
        Map<String, Object> result = new HashMap<String, Object>(); 
        Integer page = (Integer) params.get("page");
        Integer limit = (Integer) params.get("limit");
        String reportType = StringUtil.nullToBlank(params.get("reportType"));
        String subType = StringUtil.nullToBlank(params.get("subType"));
        String contract = StringUtil.nullToBlank(params.get("contract"));
        String vendor = StringUtil.nullToBlank(params.get("vendor"));
        String customerNo = StringUtil.nullToBlank(params.get("customerNo"));
        String customerName = StringUtil.nullToBlank(params.get("customerName"));
        String meterId = StringUtil.nullToBlank(params.get("meterId"));
        String casherId = StringUtil.nullToBlank(params.get("casherId"));
        String startDate = StringUtil.nullToBlank(params.get("startDate"));
        String endDate = StringUtil.nullToBlank(params.get("endDate"));
        Integer loginIntId = (Integer) params.get("loginIntId");
        Boolean onlyLoginData = (Boolean) params.get("onlyLoginData");
        Integer supplierId = (Integer) params.get("supplierId");
        // Vendor Prepayment Charge 의 Charge History 탭에서 사용.
        List<Integer> locationIdList = (List<Integer>)params.get("locationIdList");

        StringBuilder sb = new StringBuilder();
        StringBuilder sbList = new StringBuilder();
        StringBuilder sbCount = new StringBuilder();

        sbCount.append("\nSELECT  COUNT(*) AS CNT ");

        sbList.append("\nSELECT  dh.id AS DEPOSITHISTORYID, ");
        sbList.append("\n        dh.change_date AS CHANGEDATE, ");
        sbList.append("\n        dh.charge_credit AS CHARGECREDIT, ");
        sbList.append("\n        dh.charge_deposit AS CHARGEDEPOSIT, ");
        sbList.append("\n        dh.commission AS COMMISSION, ");
        sbList.append("\n        dh.tax AS TAX, ");
        sbList.append("\n        dh.netValue AS NETVALUE, ");
        sbList.append("\n        dh.deposit AS DEPOSIT, ");
        sbList.append("\n        dh.IS_CANCELED AS ISCANCELEDBYDEPOSIT, ");
        sbList.append("\n        ho.id AS HISTORYOPID, ");
        sbList.append("\n        ho.name AS HISTORYOPNAME, ");
        sbList.append("\n        ho.loginId AS HISTORYOPLOGINID, ");
        sbList.append("\n        dc.id AS HISTORYCONTRACTID, ");
        sbList.append("\n        dc.CONTRACT_NUMBER AS HISTORYCONTRACTNUMBER, ");
        sbList.append("\n        du.id AS HISTORYCUSTOMERID, ");
        sbList.append("\n        du.name AS HISTORYCUSTOMERNAME, ");
        sbList.append("\n        du.customerNo AS HISTORYCUSTOMERNO, ");
        sbList.append("\n        du.address AS HISTORYCUSTOMERADDRESS, ");
        sbList.append("\n        du.address2 AS HISTORYCUSTOMERADDRESS2, ");
        sbList.append("\n        dm.id AS HISTORYMETERID, ");
        sbList.append("\n        dm.MDS_ID AS HISTORYMETERMDSID, ");
        sbList.append("\n        pl.id AS PREPAYMENTLOGID, ");
        sbList.append("\n        pl.chargedCredit AS CHARGEDCREDIT, ");
        sbList.append("\n        plpt.name as PAYTYPE, ");
        sbList.append("\n        pl.chargedArrears AS CHARGEDARREARS, ");
        sbList.append("\n        pl.IS_CANCELED AS ISCANCELED, ");
        sbList.append("\n        pl.CANCEL_DATE AS CANCELDATE, ");
        sbList.append("\n        pl.CANCEL_REASON AS CANCELREASON, ");
        sbList.append("\n        pl.lastTokenId AS LASTTOKENID, ");
        
        sbList.append("\n        d.debtSum AS DEBTSUM, ");
        sbList.append("\n        d.chargedDebtSum AS CHARGEDDEBTSUM, ");
        
        sbList.append("\n        vc.id AS VENDORCASHERID, ");
        sbList.append("\n        vc.name AS VENDORCASHERNAME, ");
        sbList.append("\n        vc.casherId AS VCCASHERID, ");
        sbList.append("\n        op.id AS VENDINGSTATIONID, ");
        sbList.append("\n        op.name AS VENDINGSTATIONNAME, ");
        sbList.append("\n        co.id AS CONTRACTID, ");
        sbList.append("\n        co.CONTRACT_NUMBER AS GEOCODE, ");
        sbList.append("\n        me.id AS METERID, ");
        sbList.append("\n        me.MDS_ID AS MDSID, ");
        sbList.append("\n        ti.id AS TARIFFID, ");
        sbList.append("\n        ti.name AS TARIFFNAME, ");
        sbList.append("\n        cu.id AS CUSTOMERID, ");
        sbList.append("\n        cu.name AS CUSTOMERNAME, ");
        sbList.append("\n        cu.customerNo AS CUSTOMERNO, ");
        sbList.append("\n        cu.address AS ADDRESS, ");
        sbList.append("\n        cu.address1 AS ADDRESS1, ");
        sbList.append("\n        cu.address2 AS ADDRESS2 ");

        sb.append("\nFROM DEPOSIT_HISTORY dh ");
        sb.append("\n     LEFT OUTER JOIN ");
        sb.append("\n     PREPAYMENTLOG pl on(dh.prepaymentLog_id=pl.id)");
        sb.append("\n     LEFT OUTER JOIN ");
        sb.append("\n     (select prepaymentlog_id, sum(DEBT) as debtSum, sum(CHARGEDDEBT) as chargedDebtSum from DEBTLOG group by prepaymentlog_id) d ");
        sb.append("\n     on (pl.id=d.prepaymentLog_id) ");
        sb.append("\n     LEFT OUTER JOIN ");
        sb.append("\n     VENDOR_CASHER vc on(pl.vendorCasher_id=vc.id) ");
        sb.append("\n     LEFT OUTER JOIN ");
        sb.append("\n     Operator ho on(pl.operator_id=ho.id)");
        sb.append("\n     LEFT OUTER JOIN ");
        sb.append("\n     CONTRACT dc on(pl.contract_id=dc.id)");
        sb.append("\n     LEFT OUTER JOIN ");
        sb.append("\n     LOCATION cl on(dc.location_id=cl.id)");
        sb.append("\n     LEFT OUTER JOIN ");
        sb.append("\n     METER me on(dc.meter_id=me.id) ");
        sb.append("\n     LEFT OUTER JOIN ");
        sb.append("\n     TARIFFTYPE ti on(dc.tariffIndex_id=ti.id) ");
        sb.append("\n     LEFT OUTER JOIN ");
        sb.append("\n     CUSTOMER du on(dc.customer_id=du.id)");
        sb.append("\n     LEFT OUTER JOIN ");
        sb.append("\n     CODE plpt on(pl.pay_type_code=plpt.id) ");
        sb.append("\n     LEFT OUTER JOIN ");
        sb.append("\n     Operator op on(dh.operator_id=op.id)");
        sb.append("\n     LEFT OUTER JOIN ");
        sb.append("\n     CONTRACT co on(dh.contract_id=co.id)");
        sb.append("\n     LEFT OUTER JOIN ");
        sb.append("\n     LOCATION col on(co.location_id=col.id)");
        sb.append("\n     LEFT OUTER JOIN ");
        sb.append("\n     CUSTOMER cu on(dh.customer_id=cu.id) ");
        sb.append("\n     LEFT OUTER JOIN ");
        sb.append("\n     METER dm on(dh.meter_id=dm.id)");
        sb.append("\nWHERE 1=1 ");
        if(supplierId != null) {
        	sb.append("\nAND op.supplier_Id = :supplierId");
        }
        try{
        //Sales Report
        if(reportType.equals("sales")) {
        	//canceled OR nonCanceled
        	if("cancelled".equals(subType)) {
        		sb.append("\nAND (pl.IS_CANCELED = 1) ");    // cancel 검색
        	} else if("unCancelled".equals(subType)) {
        		sb.append("\nAND (pl.IS_CANCELED IS NULL OR pl.IS_CANCELED = 0) ");    // cancel 제외
        	}

        	//sales common
            if (!"".equals(contract)) {
                sb.append("\nAND co.contract_Number LIKE :contractNumber ");
            }
            
        	sb.append("\nAND dh.contract_id IS NOT NULL ");
            if (onlyLoginData && loginIntId != null) {
            	sb.append("\nAND ho.id = :loginIntId ");
            }

            if (locationIdList != null && locationIdList.size() > 0) {
                sb.append("\nAND cl.id IN (:locationIdList) ");
            }
          //Deposit Report
        } else if("deposit".equals(reportType)) {
        	//deposit common
        	sb.append("\nAND dh.prepaymentLog_id IS NULL ");    //deposit 판별
        	sb.append("\nAND dh.contract_id IS NULL ");
        	
        	//canceled OR nonCanceled
        	if("cancelled".equals(subType)) {
        		sb.append("\nAND dh.IS_CANCELED = 1 ");
        	} else if("unCancelled".equals(subType)) {
        		sb.append("\nAND (dh.IS_CANCELED IS NULL OR dh.IS_CANCELED = 0) ");
        	}

        	//deposit common        	
        	if (onlyLoginData && loginIntId != null) {
            	sb.append("\nAND op.id = :loginIntId ");
            }
        //All(Sales + Deposit)
        } else {
            if("cancelled".equals(subType)) {
                sb.append("\nAND (pl.IS_CANCELED = 1 OR dh.IS_CANCELED = 1) ");    // cancel 검색
            } else if("unCancelled".equals(subType)) {
                sb.append("\nAND ((pl.IS_CANCELED IS NULL OR pl.IS_CANCELED = 0) ");    // cancel 제외    
                sb.append("\nAND (dh.IS_CANCELED IS NULL OR dh.IS_CANCELED = 0)) ");
            }
        	
            if (!"".equals(contract)) {
                sb.append("\nAND co.contract_Number LIKE :contractNumber ");
            }
        	if (onlyLoginData && loginIntId != null) {
            	sb.append("\nAND (op.id = :loginIntId OR ho.id = :loginIntId) ");
            }
            if (locationIdList != null && locationIdList.size() > 0) {
                sb.append("\nAND col.id IN (:locationIdList) ");
            }
        }

        if (!"".equals(vendor)) {
            sb.append("\nAND op.loginId = :vendor ");
        }

        if (!"".equals(customerNo)) {
            sb.append("\nAND du.customerNo = :customerNo ");
        }

        if (!"".equals(customerName)) {
            sb.append("\nAND du.name LIKE :customerName ");
        }

        if (!"".equals(meterId)) {
            sb.append("\nAND dm.mds_Id = :meterId ");
        }

        if (!"".equals(casherId) ) {
            sb.append("\nAND vc.casherId = :casherId ");
        }

        if (!"".equals(startDate)) {
            startDate = startDate + "000000";
            sb.append("\nAND dh.change_date >= :startDate ");
        }

        if (!"".equals(endDate)) {
            endDate = endDate + "235959";
            sb.append("\nAND dh.change_date <= :endDate ");
        }

        sbCount.append(sb);
        sbList.append(sb);

        sbList.append("\nORDER BY dh.id DESC ");

        Query queryCount = getSession().createSQLQuery(sbCount.toString());
        Query queryList = getSession().createSQLQuery(sbList.toString());
        if(supplierId != null) {
        	queryCount.setInteger("supplierId", supplierId);
        	queryList.setInteger("supplierId", supplierId);
        }
        
        if (!reportType.equals("deposit")) {
            if (!contract.equals("")) {
                queryCount.setString("contractNumber", "%" + contract + "%");
                queryList.setString("contractNumber", "%" + contract + "%");
            }

            if (locationIdList != null && locationIdList.size() > 0) {
                queryCount.setParameterList("locationIdList", locationIdList);
                queryList.setParameterList("locationIdList", locationIdList);
            }
        }

        if (onlyLoginData && loginIntId != null) {
        	queryCount.setInteger("loginIntId",loginIntId);
        	queryList.setInteger("loginIntId", loginIntId);
        }

        if (!"".equals(vendor)) {
            queryCount.setString("vendor", vendor);
            queryList.setString("vendor", vendor);
        }

        if (!"".equals(customerNo)) {
            queryCount.setString("customerNo", customerNo);
            queryList.setString("customerNo", customerNo);
        }

        if (!"".equals(customerName)) {
            queryCount.setString("customerName", "%" + customerName + "%");
            queryList.setString("customerName", "%" + customerName + "%");
        }

        if (!"".equals(meterId)) {
            queryCount.setString("meterId", meterId);
            queryList.setString("meterId", meterId);
        }

        if (!"".equals(casherId)) {
            queryCount.setString("casherId", casherId);
            queryList.setString("casherId", casherId);
        }

        if (!"".equals(startDate)) {
            startDate = startDate + "000000";
            queryCount.setString("startDate", startDate);
            queryList.setString("startDate", startDate);
        }

        if (!"".equals(endDate)) {
            endDate = endDate + "235959";
            queryCount.setString("endDate", endDate);
            queryList.setString("endDate", endDate);
        }

        result.put("count", ((Number)queryCount.uniqueResult()).intValue());

        if (page != null && limit != null) {
            queryList.setFirstResult((page - 1) * limit);
            queryList.setMaxResults(limit);
        }

        List<Map<String, Object>> list = queryList.setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list();
        result.put("list", list);

        }catch (Exception e) {
			logger.error(e,e);
		}
        return result;
    }
    
}