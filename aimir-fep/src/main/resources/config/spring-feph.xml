<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:beans="http://www.springframework.org/schema/beans"
  xmlns:context="http://www.springframework.org/schema/context" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:jaxws="http://cxf.apache.org/jaxws"
  xmlns:jaxrs="http://cxf.apache.org/jaxrs"
  xmlns:sec="http://cxf.apache.org/configuration/security"
  xmlns:http="http://cxf.apache.org/transports/http/configuration"
  xmlns:httpj="http://cxf.apache.org/transports/http-jetty/configuration"
  xmlns:int="http://www.springframework.org/schema/integration"
  xmlns:int-kafka="http://www.springframework.org/schema/integration/kafka"
  xsi:schemaLocation="
    http://cxf.apache.org/jaxws
    http://cxf.apache.org/schemas/jaxws.xsd
    http://cxf.apache.org/jaxrs
    http://cxf.apache.org/schemas/jaxrs.xsd
    http://cxf.apache.org/configuration/security
    http://cxf.apache.org/schemas/configuration/security.xsd
    http://cxf.apache.org/transports/http/configuration
    http://cxf.apache.org/schemas/configuration/http-conf.xsd
    http://cxf.apache.org/transports/http-jetty/configuration
    http://cxf.apache.org/schemas/configuration/http-jetty.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/integration
    http://www.springframework.org/schema/integration/spring-integration.xsd
    ">
  <context:property-placeholder location="classpath:config/fmp.properties"/>
  <import resource="classpath:config/spring.xml"/>
  <import resource="classpath:META-INF/cxf/cxf.xml"/>

  <!-- Scans for @Repository, @Service -->
  <context:component-scan base-package="com.aimir">
    <context:exclude-filter type="assignable" expression="com.aimir.fep.adapter.EMVAdapter"/>
    <context:exclude-filter type="assignable" expression="com.aimir.fep.adapter.EMVProcessor"/>
    <context:exclude-filter type="assignable" expression="com.aimir.fep.adapter.FepAdapter"/>
    <context:exclude-filter type="assignable" expression="com.aimir.fep.adapter.FepAdapterDebug"/>
    <context:exclude-filter type="assignable" expression="com.aimir.fep.adapter.FepAdapterDebug_IF4"/>
    <context:exclude-filter type="assignable" expression="com.aimir.fep.adapter.FepAuthAdapter"/>
    <context:exclude-filter type="assignable" expression="com.aimir.fep.adapter.FepAuthAdapterDebug"/>
    <context:exclude-filter type="assignable" expression="com.aimir.fep.adapter.FEPNewAdapter"/>
    <context:exclude-filter type="assignable" expression="com.aimir.fep.adapter.FepProcessor"/>
    <context:exclude-filter type="assignable" expression="com.aimir.fep.adapter.FepProcessorDebug"/>
    <context:exclude-filter type="assignable" expression="com.aimir.fep.adapter.FepProcessorDebug_IF4"/>
    <context:exclude-filter type="assignable" expression="com.aimir.fep.adapter.SMCPAdapter"/>
    <context:exclude-filter type="assignable" expression="com.aimir.fep.adapter.SnmpAdapter"/>
  </context:component-scan>
  
  <jaxws:endpoint id="CommandWS"
         implementorClass="com.aimir.fep.command.ws.server.CommandWS"
         implementor="#commandWS"
         address="/CommandWS">
      <!-- Default JAXB 
      <jaxws:dataBinding>
          <bean class="org.apache.cxf.aegis.databinding.AegisDatabinding"/>
      </jaxws:dataBinding>
      -->
  </jaxws:endpoint>
  <jaxws:endpoint id="PrepaymentForSAWS"
         implementorClass="com.aimir.fep.meter.prepaymentForSA.ws.server.PrepaymentForSAWS"
         implementor="#prepaymentForSAWS"
         address="/PrepaymentForSAWS">
         <!-- Default JAXB 
         <jaxws:dataBinding>
             <bean class="org.apache.cxf.aegis.databinding.AegisDatabinding"/>
         </jaxws:dataBinding>
          -->
  </jaxws:endpoint>
  <jaxws:endpoint id="OnDemandReading"
         implementorClass="com.aimir.fep.command.ws.OnDemandReadingImpl"
         implementor="#onDemandReading"
         address="/OnDemandReading">
         <!-- Default JAXB 
         <jaxws:dataBinding>
             <bean class="org.apache.cxf.aegis.databinding.AegisDatabinding"/>
         </jaxws:dataBinding>
          -->
  </jaxws:endpoint>
  <jaxws:endpoint id="OnDemandReadingCallback"
         implementorClass="com.aimir.fep.command.ws.OnDemandReadingCallbackImpl"
         implementor="#onDemandReadingCallback"
         address="/OnDemandReadingCallback">
         <!-- Default JAXB 
         <jaxws:dataBinding>
             <bean class="org.apache.cxf.aegis.databinding.AegisDatabinding"/>
         </jaxws:dataBinding>
          -->
  </jaxws:endpoint>
  <jaxws:endpoint id="PowerOnOff"
         implementorClass="com.aimir.fep.command.ws.PowerOnOffImpl"
         implementor="#powerOnOff"
         address="/PowerOnOff">
         <!-- Default JAXB 
         <jaxws:dataBinding>
             <bean class="org.apache.cxf.aegis.databinding.AegisDatabinding"/>
         </jaxws:dataBinding>
          -->
  </jaxws:endpoint>
  <jaxws:endpoint id="PowerOnOffCallback"
         implementorClass="com.aimir.fep.command.ws.PowerOnOffCallbackImpl"
         implementor="#powerOnOffCallback"
         address="/PowerOnOffCallback">
         <!-- Default JAXB 
         <jaxws:dataBinding>
             <bean class="org.apache.cxf.aegis.databinding.AegisDatabinding"/>
         </jaxws:dataBinding>
          -->
  </jaxws:endpoint>

  <!-- WebService(OnDemandReading,PowerOnOff) Schedule -->
  <bean id="onDemandReadingOrderJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
    <property name="jobClass" value="com.aimir.fep.schedule.job.OnDemandReadingOrderJob"/>
  </bean>

  <bean id="onDemandReadingOrderTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
    <property name="jobDetail" ref="onDemandReadingOrderJob"/>
    <property name="startDelay" value="5000"/>
    <property name="repeatInterval" value="60000"/>
  </bean>

  <bean id="powerOnOffOrderJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
    <property name="jobClass" value="com.aimir.fep.schedule.job.PowerOnOffOrderJob"/>
  </bean>

  <bean id="powerOnOffOrderTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
    <property name="jobDetail" ref="powerOnOffOrderJob"/>
    <property name="startDelay" value="5000"/>
    <property name="repeatInterval" value="60000"/>
  </bean>
  
  <bean id="iotMDMSJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
    <property name="jobClass" value="com.aimir.fep.schedule.job.IoTMDMSJob"/>
  </bean>
  
  <bean id="iotMDMSTrigger"  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	  <property name="jobDetail" ref="iotMDMSJob" />
	  <property name="cronExpression" value="0 0/5 * * * ?" />
  </bean>

  <bean id="quartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
    <property name="triggers">
      <list>
        <ref bean="iotMDMSTrigger"/>
      </list>
    </property>
  </bean>
  
  <!-- Process -->
  <bean id="mdmsProcessor" class="com.aimir.fep.protocol.fmp.processor.MDMSProcessor" />
  <bean id="mdProcessorContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
	<property name="connectionFactory" ref="activeMQConnectionFactory" />
	<property name="destinationName" value="${ServiceData.H.MDMSData}" />
	<property name="messageListener" ref="mdmsProcessor" />
	<property name="concurrentConsumers" value="${jms.concurrent.consumers.md}" />
	<property name="maxConcurrentConsumers" value="${jms.concurrent.consumers.md}" />
  </bean>
</beans>
