package com.aimir.fep.protocol.fmp.client;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.junit.Ignore;
import org.junit.Test;

import com.aimir.fep.meter.data.BillingData;
import com.aimir.fep.meter.entry.IMeasurementData;
import com.aimir.fep.meter.parser.DLMS;
import com.aimir.fep.meter.parser.ElsterA1140;
import com.aimir.fep.meter.parser.elsterA1140Table.A1140_BILLING_DATA;
import com.aimir.fep.meter.saver.ElsterA1140MDSaver;
import com.aimir.fep.util.Hex;
import com.aimir.model.mvm.RealTimeBillingEM;

public class A1140MeterDataTest {
    private static Log log = LogFactory.getLog(A1140MeterDataTest.class);
    
    @Test
    public void test_dlms() {
        try {
            StringBuffer buf = new StringBuffer();
            buf.append
            ElsterA1140 parser = new ElsterA1140();
            parser.parse(Hex.encode(buf.toString()));
            //BillingData pb = parser.getBillingData();            
            BillingData cb  = parser.getCurrentBillingData();
            
            
            //Double meteringValue = parser.getMeteringValue();
            
            //parser.get
            //System.out.println(meteringValue);
            System.out.println("CB KVAH1="+cb.getkVah());
            //System.out.println("PB KVAH1="+pb.getKVah());
            //buf = new StringBuffer();
            
            //buf.append
            
            //A1140_BILLING_DATA billParser = new A1140_BILLING_DATA(Hex.encode(buf.toString()));
            //BillingData pb = billParser.getBillingData();
            //System.out.println(pb.getKvah());
            RealTimeBillingEM bill = new RealTimeBillingEM();
            try {
                BeanUtils.copyProperties(bill, cb);
            } catch (Exception e) {
                log.warn(e);
            }
            System.out.println("CB ActiveEnergyRateTotal="+bill.getActiveEnergyRateTotal());
            System.out.println("CB KVAH2="+bill.getkVah());
        }
        catch (Exception e) {
            log.error(e);
        }
    }

}
