package com.aimir.fep.tool;

import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.transaction.TransactionStatus;

import com.aimir.constants.CommonConstants.DeviceType;
import com.aimir.constants.CommonConstants.ModemType;
import com.aimir.dao.device.MCUDao;
import com.aimir.dao.device.ModemDao;
import com.aimir.fep.command.conf.DefaultConf;
import com.aimir.fep.command.mbean.CommandGW;
import com.aimir.fep.protocol.fmp.datatype.BYTE;
import com.aimir.fep.protocol.fmp.datatype.OCTET;
import com.aimir.fep.protocol.fmp.datatype.TIMESTAMP;
import com.aimir.fep.protocol.fmp.datatype.WORD;
import com.aimir.fep.protocol.fmp.frame.service.entry.sensorInfoNewEntry;
import com.aimir.fep.util.DataUtil;
import com.aimir.fep.util.MIBUtil;
import com.aimir.model.device.MCU;
import com.aimir.model.device.Modem;
import com.aimir.util.Condition;
import com.aimir.util.Condition.Restriction;

public class DeviceUnitScanning {
    private static Log log = LogFactory.getLog(DeviceUnitScanning.class);

    public static void main(String[] args) {
        log.info("ARG_0[" + args[0] + "] ARG_1[" + args[1] + "] ARG_2[" + args[2] + "]");
        DeviceType deviceType = null; // MCU, Modem
        String scanType = "all"; // MCU:All|DCU_ID, Modem:All|DCU|Modem_ID|Modem_Type
        String targetId = null;
        ModemType modemType = null;
        boolean allScan = false;
        
        if (args[0] != null && !"".equals(args[0])) {
            String dt = args[0].toUpperCase();
            if (dt.equals("MCU"))
                deviceType = DeviceType.MCU;
            else if (dt.equals("MODEM"))
                deviceType = DeviceType.Modem;
            else if (dt.equals("METER"))
                deviceType = DeviceType.Meter;
        }
        else  {
            log.info("mvn -f pom-scan.xml antrun:run -DdeviceType=mcu|modem");
            System.exit(0);
        }
        
        if (deviceType == DeviceType.MCU) {
            if (!args[1].equals(""))
                scanType = args[1];
            else {
                log.info("mvn -f pom-scan.xml antrun:run -DdeviceType=mcu -DscanType=all|mcu_id -DtargetId=mcu_id -DallScan=true|false");
                System.exit(0);
            }
            
            if (!scanType.equalsIgnoreCase("all")) {
                if (!args[2].equals(""))
                    targetId = args[2];
                else {
                    log.info("mvn -f pom-scan.xml antrun:run -DdeviceType=mcu -DscanType=all|mcu_id -DtargetId=mcu_id -DallScan=true|false");
                    System.exit(0);
                }
            }
        }
        else if (deviceType == DeviceType.Modem) {
            if (!args[1].equals(""))
                scanType = args[1];
            else {
                log.info("mvn -f pom-scan.xml antrun:run -DdeviceType=modem -DscanType=all|mcu|modem_type|modem_id -DtargetId=mcu_id|modem_type[all:zru:zeupls]|modem_id -DallScan=true|false");
                System.exit(0);
            }
            
            if (scanType.equalsIgnoreCase("mcu")) {
                targetId = args[2];
                if (targetId == null || "".equals(targetId)) {
                    log.info("mvn -f pom-scan.xml antrun:run -DdeviceType=modem -DscanType=mcu -DtargetId=mcu_id -DallScan=true|false");
                    System.exit(0);
                }
            }
            else if (scanType.equalsIgnoreCase("modem_type")) {
                if (!"".equals(args[2]))
                    modemType = ModemType.valueOf(args[2].toUpperCase());
            }
            else if (scanType.equalsIgnoreCase("modem_id")) {
                if (!"".equals(args[2]))
                    targetId = args[2];
                else {
                    log.info("mvn -f pom-scan.xml antrun:run -DdeviceType=modem -DscanType=modem_id -DtargetId=modem_id -DallScan=true|false");
                    System.exit(0);
                }
            }
        }
        
        if (args[3] != null && !"".equals(args[3]))
            allScan = Boolean.parseBoolean(args[3]);
        
        
        ApplicationContext ctx = new ClassPathXmlApplicationContext(new String[]{"/config/spring.xml"}); 
        DataUtil.setApplicationContext(ctx);
        
        DeviceUnitScanning scanner = new DeviceUnitScanning();
        scanner.run(deviceType, scanType, targetId, modemType, allScan);
        
        System.exit(0);
    }
    
    public void run(DeviceType deviceType, String scanType, String targetId, ModemType modemType, boolean allScan) {
        MCUDao mcuDao = DataUtil.getBean(MCUDao.class);
        ModemDao modemDao = DataUtil.getBean(ModemDao.class);
        
        JpaTransactionManager txmanager = null;
        TransactionStatus txstatus = null;
        
        if (deviceType == DeviceType.MCU) {
            List<MCU> mculist = null;
            
            try {
                if (scanType.equalsIgnoreCase("all") && allScan) {
                    txmanager = DataUtil.getBean(JpaTransactionManager.class);
                    txstatus = txmanager.getTransaction(null);
                    mculist = mcuDao.getAll();
                    txmanager.commit(txstatus);
                }
                else if (scanType.equalsIgnoreCase("all") && !allScan) {
                    txmanager = DataUtil.getBean(JpaTransactionManager.class);
                    txstatus = txmanager.getTransaction(null);
                    
                    Set<Condition> condition = new HashSet<Condition>();
                    condition.add(new Condition("sysSwRevision", null, null, Restriction.NULL));
                    
                    mculist = mcuDao.findByConditions(condition);
                    txmanager.commit(txstatus);
                }
                else if (scanType.equalsIgnoreCase("mcu_id") && !"".equals(targetId)) {
                    mculist = new ArrayList<MCU>();
                    mculist.add(mcuDao.get(targetId));
                }
            }
            catch (Exception e) {
                if (txstatus != null) txmanager.rollback(txstatus);
                log.error(e,e);
            }
            
            log.info("MCU Scanning Start MCU.size[" + mculist.size() + "]");
            
            if(mculist != null && mculist.size() > 0) {
                ThreadPoolExecutor executor = new ThreadPoolExecutor(10, 10, 1, TimeUnit.HOURS, new LinkedBlockingQueue());
                
                for (MCU mcu : mculist) {
                    executor.execute(new MCUUnitScanningThread(mcu));
                }
                try {
                    executor.shutdown();
                    while (!executor.isTerminated()) {
                    }
                }
                catch (Exception e) {}
            }
            log.info("MCU Scanning End");
        }
        else if (deviceType == DeviceType.Modem) {
            List<MCU> mculist = null;
            
            try {
                if (scanType.equalsIgnoreCase("all") || scanType.equalsIgnoreCase("modem_type")) {
                    txmanager = DataUtil.getBean(JpaTransactionManager.class);
                    txstatus = txmanager.getTransaction(null);
                    mculist = mcuDao.getAll();
                    txmanager.commit(txstatus);
                }
                else if (scanType.equalsIgnoreCase("mcu")) {
                    txmanager = DataUtil.getBean(JpaTransactionManager.class);
                    txstatus = txmanager.getTransaction(null);
                    mculist = new ArrayList<MCU>();
                    mculist.add(mcuDao.get(targetId));
                    txmanager.commit(txstatus);
                }
                else if (scanType.equalsIgnoreCase("modem_id")) {
                    txmanager = DataUtil.getBean(JpaTransactionManager.class);
                    txstatus = txmanager.getTransaction(null);
                    Modem modem = modemDao.get(targetId);
                    txmanager.commit(txstatus);
                    
                    if (modem != null) {
                        ModemUnitScanningThread scanner = new ModemUnitScanningThread(null, null, true);
                        scanner.scan(modem);
                    }
                }
            }
            catch (Exception e) {
                if (txstatus != null) txmanager.rollback(txstatus);
                log.error(e,e);
            }
            
            log.info("Modem Scanning Start MCU.size[" + mculist.size() + "]");
            
            if(mculist != null && mculist.size() > 0) {
                ThreadPoolExecutor executor = new ThreadPoolExecutor(10, 10, 1, TimeUnit.HOURS, new LinkedBlockingQueue());
                
                for (MCU mcu : mculist) {
                    executor.execute(new ModemUnitScanningThread(mcu, modemType, allScan));
                }
                try {
                    executor.shutdown();
                    while (!executor.isTerminated()) {
                    }
                }
                catch (Exception e) {}
            }
            log.info("Modem Scanning End");
        }
    }
}

class MCUUnitScanningThread implements Runnable {
    private static Log log = LogFactory.getLog(MCUUnitScanningThread.class);
    
    private MCU mcu;
    
    public MCUUnitScanningThread(MCU mcu) {
        this.mcu = mcu;
    }
    
    @Override
    public void run() {
        DefaultConf defaultConf = DefaultConf.getInstance();
        Hashtable props = null;
        MIBUtil mibUtil = null;
        JpaTransactionManager txmanager = DataUtil.getBean(JpaTransactionManager.class);
        TransactionStatus txstatus = null;
        try {
            if(mcu.getNameSpace() != null && !"".equals(mcu.getNameSpace())){
                props = defaultConf.getDefaultProperties("MCU-"+mcu.getNameSpace());
                if(props == null){
                    props = defaultConf.getDefaultProperties("MCU");
                    log.debug("props size=" + props.size());
                    mibUtil = MIBUtil.getInstance(mcu.getNameSpace());
                }
            }else{
                props = defaultConf.getDefaultProperties("MCU");
                log.debug("props size=" + props.size());
                mibUtil = MIBUtil.getInstance();
            }
    
            List<String> property = new ArrayList<String>();
            Iterator it = props.keySet().iterator();
            for (int i = 0; it.hasNext(); i++) {
                try {
    
                    String key = (String) it.next();
                    // property[i] = (mibUtil.getOid(key)).getValue();
                    property.add(key);
                    log.debug("props[" + i + "] :" + key + " ,oid= " + property.get(i));
                } catch (Exception e) {
                }
            }

            CommandGW gw = DataUtil.getBean(CommandGW.class);
            // gw.cmdMcuScanning(mcu.getSysID(), property.toArray(new String[0]));
            Hashtable tbl = gw.cmdStdGet(mcu.getSysID(), property.toArray(new String[0]));
            Object key = null;
            for (Enumeration e = tbl.keys() ; e.hasMoreElements(); ) {
                key = e.nextElement();
                log.info("Key[" + key + "] Value[" + tbl.get(key) + "]");
            }
            txstatus = txmanager.getTransaction(null);
            MCUDao mcuDao = DataUtil.getBean(MCUDao.class);
            MCU _mcu = mcuDao.get(mcu.getId());
            _mcu.setSysHwVersion((String)tbl.get("sysHwVersion"));
            _mcu.setSysSwRevision((String)tbl.get("sysSwRevision"));
            _mcu.setSysSwVersion((String)tbl.get("sysSwVersion"));
            _mcu.setSysMobileType(Integer.parseInt((String)tbl.get("sysMobileType")));
            _mcu.setSysMobileMode(Integer.parseInt((String)tbl.get("sysMobileMode")));
            _mcu.setSysEtherType(Integer.parseInt((String)tbl.get("sysEtherType")));
            _mcu.setSysUpTime((String)tbl.get("sysUpTime"));
            mcuDao.update(_mcu);
            txmanager.commit(txstatus);
        } catch (Exception e) {
            if (txstatus != null) txmanager.rollback(txstatus);
            log.error(e, e);
        }
    }
}

class ModemUnitScanningThread implements Runnable {
    private static Log log = LogFactory.getLog(ModemUnitScanningThread.class);
    
    MCU mcu;
    ModemType modemType;
    boolean allScan;

    ModemUnitScanningThread(MCU mcu, ModemType modemType, boolean allScan) {
        this.mcu = mcu;
        this.modemType = modemType;
        this.allScan = allScan;
    }
    
    @Override
    public void run() {
        
        try {
            List<Modem> modemlist = getModem();
            for (Modem m : modemlist) {
                scan(m);
            }
        }
        catch (Exception e) {}
        return;
    }
    
    private List<Modem> getModem() {
        JpaTransactionManager txmanager = DataUtil.getBean(JpaTransactionManager.class);
        TransactionStatus txstatus = null;
        List<Modem> modemlist = null;
        ModemDao modemDao = DataUtil.getBean(ModemDao.class);
        try {
            txstatus = txmanager.getTransaction(null);
            
            Set<Condition> condition = new HashSet<Condition>();
            condition.add(new Condition("mcu", new Object[]{"m"}, null, Restriction.ALIAS));
            condition.add(new Condition("m.id", new Object[]{mcu.getId()}, null, Restriction.EQ));
            
            if (modemType != null) {
                condition.add(new Condition("modemType", new Object[]{modemType}, null, Restriction.EQ));
            }
            
            if (!allScan) {
                condition.add(new Condition("fwRevision", null, null, Restriction.NULL));
            }
            
            modemlist = modemDao.findByConditions(condition);
            txmanager.commit(txstatus);
        }
        catch (Exception e) {
            if (txstatus != null) txmanager.rollback(txstatus);
        }
        
        return modemlist;
    }
    
    public void scan(Modem modem) {
        CommandGW gw = DataUtil.getBean(CommandGW.class);
        
        if(modem != null && modem.getAmiNetworkAddress() != null && !"".equals(modem.getAmiNetworkAddress())){
            
            log.info("doGetModemCluster[" + modem.getDeviceSerial() + "]");
            try {
                String ret = gw.doGetModemCluster(mcu.getSysID(), modem.getDeviceSerial(), modem.getModemType().name(), 0, "system");
                log.info(ret);
            }
            catch (Exception e) {
                
            }
        }else{
            log.info("cmdGetModemInfoNew[" + modem.getDeviceSerial() + "]");
            JpaTransactionManager txmanager = DataUtil.getBean(JpaTransactionManager.class);
            ModemDao modemDao = DataUtil.getBean(ModemDao.class);
            TransactionStatus txstatus = null;
            
            try {
                sensorInfoNewEntry sensorEntries = gw.cmdGetModemInfoNew(modem.getDeviceSerial());
                
                txstatus = txmanager.getTransaction(null);
                Modem _modem = modemDao.get(modem.getId());
                
                _modem.setCommState(new BYTE(sensorEntries.getSensorState().getValue()).getValue());
                _modem.setFwRevision(new WORD(sensorEntries.getSensorFwBuild().getValue()).getValue() + "");
                _modem.setFwVer(new WORD(sensorEntries.getSensorFwVersion().getValue()).decodeVersion());
                _modem.setHwVer(new WORD(sensorEntries.getSensorHwVersion().getValue()).decodeVersion());
                _modem.setLastLinkTime(new TIMESTAMP(sensorEntries.getSensorLastConnect().getValue()).getValue());
                _modem.setNodeKind(new OCTET(sensorEntries.getSensorModel().getValue()).toString());
                
                log.info("Modem Model[" + sensorEntries.getSensorModel().toString() + "]");
                modemDao.update(_modem);
                
                txmanager.commit(txstatus);
                log.info("Modem[" + _modem.getDeviceSerial() + 
                        "] CommState[" + _modem.getCommState() +
                        "] FwRevision[" + _modem.getFwRevision() +
                        "] FwVer[" + _modem.getFwVer() +
                        "] HwVer[" + _modem.getHwVer() +
                        "] LastLinkTime[" + _modem.getLastLinkTime() +
                        "] NodeKind[" + _modem.getNodeKind() + "]");
            }
            catch (Exception e) {
                if (txstatus != null) txmanager.rollback(txstatus);
            }
        }
    }
}
