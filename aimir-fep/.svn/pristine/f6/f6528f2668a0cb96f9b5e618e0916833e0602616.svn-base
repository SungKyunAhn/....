/**
 * (@)# ModebusDefaultInverterTable.java
 *
 * 2015. 10. 23.
 *
 * Copyright (c) 2013 NURITELECOM, Inc.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of 
 * NURITELECOM, Inc. ("Confidential Information").  You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with NURITELECOM, Inc.
 *
 * For more information on this product, please see
 * http://www.nuritelecom.co.kr
 *
 */
package com.aimir.fep.meter.parser.EMnVCompensatorTable;

import java.util.LinkedHashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.aimir.fep.meter.parser.EMnVCompensatorTable.EMnVDefaultCompensatorVariable.DEFAULT_COMPENSATOR_CODE;
import com.aimir.fep.protocol.emnv.frame.EMnVConstants;
import com.aimir.fep.util.DataUtil;

/**
 * @author innnbang
 *
 */
public class EMnVDefaultCompensatorTable {
	private static Logger log = LoggerFactory.getLogger(EMnVDefaultCompensatorTable.class);
	Map<String, Object> obisMap = new LinkedHashMap<String, Object>();

	public Object getData() {
		return obisMap;
	}

	public Map<String, Object> setData(int pos, byte[] data, int dataCount) throws Exception {
		log.info("총  DEFAULT_COMPENSATOR_CODE 갯수 ==> {}", dataCount);
		for (int i = 0; i < dataCount; i++) {
			// Data time
			byte[] dataTime_byte = new byte[EMnVConstants.COMPENSATOR_DATA_TIME_LEN];
			System.arraycopy(data, pos, dataTime_byte, 0, dataTime_byte.length);
			pos += EMnVConstants.COMPENSATOR_DATA_TIME_LEN;
			obisMap.put(DEFAULT_COMPENSATOR_CODE.DATE.name() + "-" + i, DataUtil.getEMnvDate6Byte(dataTime_byte)); // 날짜
			
			// UNCORRECTED_ACCUMULATION 
			byte[] uncorrected_accumulation_byte = new byte[EMnVConstants.COMPENSATOR_UNCORRECTED_ACCUMULATION_LEN];
			System.arraycopy(data, pos, uncorrected_accumulation_byte, 0, uncorrected_accumulation_byte.length);
			pos += EMnVConstants.COMPENSATOR_UNCORRECTED_ACCUMULATION_LEN;
			obisMap.put(DEFAULT_COMPENSATOR_CODE.UNCORRECTED_ACCUMULATION.name() + "-" + i, DataUtil.getIntTo4Byte(uncorrected_accumulation_byte)); // 비보정적산			

			// CORRECTED_ACCUMULATION 
			byte[] corrected_accumulation_byte = new byte[EMnVConstants.COMPENSATOR_CORRECTED_ACCUMULATION_LEN];
			System.arraycopy(data, pos, corrected_accumulation_byte, 0, corrected_accumulation_byte.length);
			pos += EMnVConstants.COMPENSATOR_CORRECTED_ACCUMULATION_LEN;
			obisMap.put(DEFAULT_COMPENSATOR_CODE.CORRECTED_ACCUMULATION.name() + "-" + i, DataUtil.getIntTo4Byte(corrected_accumulation_byte)); // 보정적산

			// PRESSURE
			byte[] pressure_byte = new byte[EMnVConstants.COMPENSATOR_PRESSURE_LEN];
			System.arraycopy(data, pos, pressure_byte, 0, pressure_byte.length);
			pos += EMnVConstants.COMPENSATOR_PRESSURE_LEN;
			obisMap.put(DEFAULT_COMPENSATOR_CODE.PRESSURE.name() + "-" + i, DataUtil.getIntTo4Byte(pressure_byte)); // 압력
			
			// TEMPERATURE
			byte[] temperature_byte = new byte[EMnVConstants.COMPENSATOR_TEMPERATURE_LEN];
			System.arraycopy(data, pos, temperature_byte, 0, temperature_byte.length);
			pos += EMnVConstants.COMPENSATOR_TEMPERATURE_LEN;
			obisMap.put(DEFAULT_COMPENSATOR_CODE.TEMPERATURE.name() + "-" + i, DataUtil.getIntTo4Byte(temperature_byte)); // 온도
			
			// CORRECTION_FACTOR
			byte[] factor_byte = new byte[EMnVConstants.COMPENSATOR_CORRECTION_FACTOR_LEN];
			System.arraycopy(data, pos, factor_byte, 0, factor_byte.length);
			pos += EMnVConstants.COMPENSATOR_CORRECTION_FACTOR_LEN;
			obisMap.put(DEFAULT_COMPENSATOR_CODE.CORRECTION_FACTOR.name() + "-" + i, DataUtil.getIntTo4Byte(factor_byte)); // 보정계수
		}

		log.info("[PROTOCOL][METERING_DATA] SET_DATA => {}", obisMap.toString());
		return obisMap;
	}
}
