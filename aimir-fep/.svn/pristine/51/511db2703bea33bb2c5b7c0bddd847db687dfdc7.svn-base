Kafka configuration for 2 FEPs (refer to http://epicdevs.com/20)
Pre 
- port : 2181, 2888, 3888, 9092

1.zookeeper configuration for cluster
1.1 open config/zookeeper.properties
1.2 add configuration for server1 (FEP01). Server2(FEP02) has to be set like server1
   initLimit = 5
   syncLimit = 2
   server.1 = 0.0.0.0:2888:3888
   server.2 = 10.40.206.12:2888:3888
1.3 myid for each server
   echo 1 > /tmp/zookeeper/myid
   
2. kafka configuration for cluster
2.1 open server.properties on server1
   - edit server.properties
     - broker.id = 0
     - zookeeper.connect=localhost:2181,10.40.206.12:2181
2.2 open server.properties on server2
   - edit server.properties
     - broker.id = 1
     - zookeeper.connect=localhost:2181,10.40.206.11:2181
     
3. execute
3.1 server1
  bin/startzk.sh
  bin/startkf.sh
3.2 server2
  bin/startzk.sh
  bin/startkf.sh
   
4. Topic configuration   
- create topic (replication-factor is same with brokers) on server1 (it doesn't need to add topic on server2)
./bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 2 --partitions 20 --topic ServiceData.MDData
./bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 2 --partitions 20 --topic ServiceData.DFData
./bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 2 --partitions 20 --topic ServiceData.EventData2
./bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 2 --partitions 20 --topic ServiceData.EventData

./bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 4 --topic ServiceData.MDData
./bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 4 --topic ServiceData.DFData
./bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 4 --topic ServiceData.EventData2
./bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 4 --topic ServiceData.EventData

- alter partition
./bin/kafka-topics.sh --alter --zookeeper localhost:2181 --topic ServiceData.MDData --partitions 20
./bin/kafka-topics.sh --alter --zookeeper localhost:2181 --topic ServiceData.DFData --partitions 20
./bin/kafka-topics.sh --alter --zookeeper localhost:2181 --topic ServiceData.EventData2 --partitions 20
./bin/kafka-topics.sh --alter --zookeeper localhost:2181 --topic ServiceData.EventData --partitions 20

- list topic
./bin/kafka-topics.sh --list --zookeeper localhost:2181

- describe topic
./bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic ServiceData.MDData
replica is 2

5. Troubleshooting
- connectionexception
This is the way that I solve the problem:

At least 3 ZooKeeper nodes are required, I have to configure one more. 
This is because the way that ZK determine the leader, 
it required more that the 50% of the nodes up and running.

Add this parameter to ZooKeeper properties file: tickTime=200 
This parameter is required to use those other parameters: initLimit=5 syncLimit=2

Add this property in Producer: props.setProperty(ProducerConfig.RECONNECT_BACKOFF_MS_CONFIG, "10000"); //reconnect.backoff.ms

With "RECONNECT_BACKOFF_MS_CONFIG" property the WARN is thrown only once (not a infinite loop) and then the message is sent