package com.aimir.fep.protocol.fmp.log;

import java.io.BufferedInputStream;
import java.io.ObjectInputStream;
import java.io.FileInputStream;
import java.io.Serializable;
import java.io.IOException;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;

import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.Session;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.jms.core.JmsTemplate;
import org.springframework.jms.core.MessageCreator;

/**
 * MessageLogger.java
 *
 * Logger which logs to a file
 *
 * Created: Thu Dec 09 15:51:37 2009
 *
 * @author  J.S Park (elevas@nuritelecom.com)
 * @version 0.1
 */
public abstract class MessageLogger {
    protected Log log = LogFactory.getLog(this.getClass().getName());

    protected File logDir = null;
    protected File backupDir = null;
    protected String logDirName = "/tmp/fmpcommlog";
    protected String backupDirName = "/tmp/fmpcommlog/backup";
    protected LogFilenameFilter fileFilter = new LogFilenameFilter();

    protected String queueName = null;

    protected JmsTemplate jmsTemplate = null;

    public MessageLogger() throws IOException {
    }

    public String getQueueName() {
        return queueName;
    }

    public void setQueueName(String queueName) {
        this.queueName = queueName;
    }

    public String getLogDirName() {
        return logDirName;
    }

    public void setLogDirName(String logDirName) {
        this.logDirName = logDirName;
    }

    public String getBackupDirName() {
        return backupDirName;
    }
    
    public void setBackupDirName(String backupDirName) {
        this.backupDirName = backupDirName;
    }
    
    public JmsTemplate getJmsTemplate() {
        return jmsTemplate;
    }

    public void setJmsTemplate(JmsTemplate jmsTemplate) {
        this.jmsTemplate = jmsTemplate;
    }

    public void init() throws IOException
    {
        logDir = new File(logDirName);
        if(!logDir.exists())
            logDir.mkdir();
        
        backupDir = new File(backupDirName);
        if (!backupDir.exists())
            backupDir.mkdir();
    }

    /**
     * Writes the message to the file
     */
    public abstract String writeObject(Serializable obj);

    /**
     * backup the message to the file
     * @param obj
     */
    public abstract void backupObject(Serializable obj);
    
    public Object readLog(String filename) {
        return readLog(new File(filename));
    }
    
    public Object readLog(File f)
    {
        Object obj = null;
        ObjectInputStream is = null;
        try {
            is = new ObjectInputStream(
                    new BufferedInputStream(new FileInputStream(f)));
            obj = is.readObject();
            f.delete();
            return obj;
        }
        catch(Exception ex)
        {
            log.error(ex);
        }
        finally {
            if (is != null) {
                try {
                    is.close();
                }
                catch (Exception e) {
                    log.error(e, e);
                }
            }
        }
        return obj;
    }

    protected String getBackupDir()
    {
        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
        String today = sdf.format(cal.getTime());
        File file = new File(logDirName + File.pathSeparator + today);
        if (!file.exists())
            file.mkdir();
        
        return file.getPath();
    }
    /**
     * read Log
     */
    public synchronized Serializable[] readObject() {
        ArrayList<Object> al = new ArrayList<Object>();
        Object obj = null;
        try
        {
            File[] files = logDir.listFiles(fileFilter);

            if(files!=null){
	            for(int i = 0 ; i < files.length ; i++)
	            {
	                obj = readLog(files[i]);
	                if(obj != null)
	                {
	                    al.add(obj);
	                }
	            }
            }
        } catch(Exception ex)
        {
            log.error(ex);
        }
        return (Serializable[])al.toArray(new Serializable[0]);
    }


    public boolean isReadableObject()
    {
        File[] files = logDir.listFiles(fileFilter);

        if(files!=null){
        	if(files.length > 0)
        		return true;
        }
        return false;
    }

    public void resendLogger() {
        if(isReadableObject())
        {
            Serializable[] gls = (Serializable[])readObject();

            if(gls!=null){
	            for(int i = 0 ; i < gls.length ; i++) {
	                sendLog(gls[i]);
	            }
            }
        }
    }

    // send log
    public void sendLog(final Serializable data)
    {
        try {
            log.debug("Queue name[" + queueName + "]");
            jmsTemplate.send(queueName, new MessageCreator() {
                public Message createMessage(Session session) throws JMSException {
                    return session.createObjectMessage(data);
                }
            });
        }
        catch (Exception e) {
            log.error(e);
        }
    }
}

