package com.aimir.fep.protocol.nip.command;

import java.util.HashMap;

import com.aimir.fep.protocol.nip.frame.GeneralFrame.CommandFlow;
import com.aimir.fep.protocol.nip.frame.GeneralFrame.CommandType;
import com.aimir.fep.protocol.nip.frame.payload.AbstractCommand;
import com.aimir.fep.protocol.nip.frame.payload.Command;
import com.aimir.fep.util.DataUtil;

public class NodeAuthorization extends AbstractCommand{
    
    private int nodeCount;
    private AuthorizationInfo[] authorizationInfo;
    
    public NodeAuthorization() {
        super(new byte[] {(byte)0xC3, (byte)0x05});
    }
    
    public int getNodeCount() {
        return nodeCount;
    }

    public void setNodeCount(int nodeCount) {
        this.nodeCount = nodeCount;
    }

    @Override
    public void decode(byte[] bx) {
        int pos = 0;
        byte[] b = new byte[2];
        System.arraycopy(bx, pos, b, 0, b.length);
        nodeCount = DataUtil.getIntTo2Byte(b);
        pos += b.length;
        
        authorizationInfo = new AuthorizationInfo[nodeCount];
        for(int i=0;i<authorizationInfo.length-1;i++){
        	 authorizationInfo[i] = new AuthorizationInfo();
        	 b = new byte[8];
             System.arraycopy(bx, pos, b, 0, b.length);
             authorizationInfo[i].setNodeEui(String.valueOf(DataUtil.getIntTo8Byte(b)));
             pos += b.length;
             
             b = new byte[1];
             System.arraycopy(bx, pos, b, 0, b.length);
             authorizationInfo[i].setAuthorizationStatus(b[0]);
             pos += b.length;
        }
    }
	
    @Override
    public Command get(HashMap info) throws Exception {
       Command command = new Command();
       Command.Attribute attr = command.newAttribute();
       Command.Attribute.Data[] datas = attr.newData(1);
       
       command.setCommandFlow(CommandFlow.Request);
       command.setCommandType(CommandType.Get);
       datas[0].setId(getAttributeID());
       
       int nodeCount = (int)info.get("nodeCount");
       String[] euiList = (String[])info.get("euiList");
       
       datas[0].setValue(DataUtil.get2ByteToInt(nodeCount));
       for(int i=0;i<nodeCount;i++){
    	   datas[0].setValue(DataUtil.get8ByteToInt(Long.parseLong(euiList[i])));
       }
       attr.setData(datas);
       command.setAttribute(attr);
       return command;
    }
	
    @Override  
    public Command set(HashMap info) throws Exception {
		
       Command command = new Command();
       Command.Attribute attr = command.newAttribute();
       Command.Attribute.Data[] datas = attr.newData(1);
       
       command.setCommandFlow(CommandFlow.Request);
       command.setCommandType(CommandType.Get);
       datas[0].setId(getAttributeID());
       int nodeCount = (int)info.get("nodeCount");
       AuthorizationInfo[] authorizationInfo = (AuthorizationInfo[])info.get("authorizationInfo");
       
       datas[0].setValue(DataUtil.get2ByteToInt(nodeCount));
       for(int i=0;i<nodeCount;i++){
    	   datas[0].setValue(DataUtil.get8ByteToInt(Long.parseLong(authorizationInfo[i].getNodeEui())));
    	   datas[0].setValue((new byte[]{authorizationInfo[i]._authorizationStatus.getCode()}));
       }
       attr.setData(datas);
       command.setAttribute(attr);
       return command;
    }

    @Override
    public String toString() {
        StringBuffer rtn= new StringBuffer();
	    
        for(int i=0; i< authorizationInfo.length-1 ;i++){
            rtn.append("[i:"+i+"]");
            rtn.append("[NodeEui:"+((AuthorizationInfo)authorizationInfo[i]).getNodeEui()+"]");
            rtn.append("[AuthorizationStatus:"+((AuthorizationInfo)authorizationInfo[i])._authorizationStatus.name()+"]");
        }

        return "[NodeAuthorization]"+
        "[nodeCount:"+nodeCount+"]"+
        rtn.toString();	   
	}

    @Override
    public void decode(byte[] p1, CommandType p2) throws Exception{}

    @Override
    public Command get() throws Exception{return null;}
    
    @Override
    public Command set() throws Exception{return null;}

    @Override
    public Command trap() throws Exception{return null;}
	
}
