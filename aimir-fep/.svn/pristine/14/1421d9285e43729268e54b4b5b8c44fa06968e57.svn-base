package com.aimir.fep.protocol.emnv.test;
import org.apache.mina.core.buffer.IoBuffer;
import org.junit.*;

import com.aimir.fep.meter.parser.DLMSEMnVGtype;
import com.aimir.fep.meter.parser.DLMSEMnVGTypeTable.DLMSEMnVGtypeTable;
import com.aimir.fep.protocol.emnv.server.EMnVGeneralFrameDecoder;
import com.aimir.fep.util.DataUtil;
import com.aimir.fep.util.Hex;


public class DecodeTest {
	byte rawData[] = {
			(byte)0x4B, (byte)0x45, (byte)0x50, (byte)0x33, (byte)0x35, (byte)0x39,
			(byte)0x30, (byte)0x32, (byte)0x32, (byte)0x30, (byte)0x35, (byte)0x30,
			(byte)0x30, (byte)0x30, (byte)0x30, (byte)0x37, (byte)0x32, (byte)0x39,
			(byte)0x03, (byte)0x14, (byte)0x00, (byte)0xD3, (byte)0xE8, (byte)0x67,
			(byte)0xE6, (byte)0x00, (byte)0x0D, (byte)0x6F, (byte)0x00, (byte)0x03,
			(byte)0x01, (byte)0x29, (byte)0x07, (byte)0x1C, (byte)0x00, (byte)0x00,
			(byte)0x02, (byte)0xCF, (byte)0x05, (byte)0x01, (byte)0x00, (byte)0x5A,
			(byte)0x46, (byte)0x57, (byte)0x56, (byte)0x45, (byte)0x52, (byte)0x53,
			(byte)0x49, (byte)0x4F, (byte)0x4E, (byte)0x5A, (byte)0x48, (byte)0x57,
			(byte)0x56, (byte)0x45, (byte)0x52, (byte)0x53, (byte)0x49, (byte)0x4F,
			(byte)0x4E, (byte)0x0E, (byte)0xF4, (byte)0xA6, (byte)0x4E, (byte)0x55,
			(byte)0x52, (byte)0x49, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
			(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
			(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
			(byte)0x32, (byte)0x30, (byte)0x31, (byte)0x34, (byte)0x30, (byte)0x36,
			(byte)0x32, (byte)0x34, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
			(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
			(byte)0x00, (byte)0x00, (byte)0x31, (byte)0x32, (byte)0x33, (byte)0x34,
			(byte)0x35, (byte)0x36, (byte)0x37, (byte)0x38, (byte)0x00, (byte)0x00,
			(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
			(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x0B, (byte)0x02,
			(byte)0x76, (byte)0x00, (byte)0x01, (byte)0x01, (byte)0x00, (byte)0x00,
			(byte)0x00, (byte)0x01, (byte)0xFF, (byte)0x02, (byte)0x09, (byte)0x07,
			(byte)0x30, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x38, (byte)0x31,
			(byte)0x37, (byte)0x00, (byte)0x01, (byte)0x01, (byte)0x00, (byte)0x00,
			(byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x02, (byte)0x09, (byte)0x07,
			(byte)0x30, (byte)0x30, (byte)0x30, (byte)0x33, (byte)0x33, (byte)0x32,
			(byte)0x34, (byte)0x00, (byte)0x08, (byte)0x00, (byte)0x00, (byte)0x01,
			(byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x02, (byte)0x09, (byte)0x0C,
			(byte)0x07, (byte)0xDE, (byte)0x08, (byte)0x13, (byte)0x01, (byte)0x14,
			(byte)0x24, (byte)0x00, (byte)0xFF, (byte)0x02, (byte)0x1C, (byte)0x01,
			(byte)0x00, (byte)0x03, (byte)0x01, (byte)0x01, (byte)0x00, (byte)0x03,
			(byte)0x00, (byte)0xFF, (byte)0x02, (byte)0x17, (byte)0x44, (byte)0x7A,
			(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x03, (byte)0x01, (byte)0x01,
			(byte)0x00, (byte)0x03, (byte)0x00, (byte)0xFF, (byte)0x03, (byte)0x02,
			(byte)0x02, (byte)0x0F, (byte)0xFD, (byte)0x16, (byte)0x2D, (byte)0x00,
			(byte)0x03, (byte)0x01, (byte)0x01, (byte)0x00, (byte)0x08, (byte)0x04,
			(byte)0xFF, (byte)0x02, (byte)0x11, (byte)0x3C, (byte)0x00, (byte)0x03,
			(byte)0x01, (byte)0x01, (byte)0x00, (byte)0x08, (byte)0x04, (byte)0xFF,
			(byte)0x03, (byte)0x02, (byte)0x02, (byte)0x0F, (byte)0x00, (byte)0x16,
			(byte)0x06, (byte)0x00, (byte)0x03, (byte)0x01, (byte)0x01, (byte)0x01,
			(byte)0x08, (byte)0x00, (byte)0xFF, (byte)0x02, (byte)0x06, (byte)0x00,
			(byte)0x00, (byte)0x01, (byte)0xF4, (byte)0x00, (byte)0x03, (byte)0x01,
			(byte)0x01, (byte)0x01, (byte)0x08, (byte)0x00, (byte)0xFF, (byte)0x03,
			(byte)0x02, (byte)0x02, (byte)0x0F, (byte)0x00, (byte)0x16, (byte)0xFF,
			(byte)0x00, (byte)0x07, (byte)0x01, (byte)0x00, (byte)0x63, (byte)0x01,
			(byte)0x00, (byte)0xFF, (byte)0x07, (byte)0x06, (byte)0x00, (byte)0x00,
			(byte)0x01, (byte)0x19, (byte)0x00, (byte)0x07, (byte)0x01, (byte)0x00,
			(byte)0x63, (byte)0x01, (byte)0x00, (byte)0xFF, (byte)0x02, (byte)0x01,
			(byte)0x16, (byte)0x02, (byte)0x02, (byte)0x09, (byte)0x0C, (byte)0x07,
			(byte)0xDE, (byte)0x08, (byte)0x13, (byte)0x01, (byte)0x14, (byte)0x00,
			(byte)0x00, (byte)0xFF, (byte)0x02, (byte)0x1C, (byte)0x01, (byte)0x06,
			(byte)0x00, (byte)0x00, (byte)0x01, (byte)0xF2, (byte)0x02, (byte)0x02,
			(byte)0x09, (byte)0x0C, (byte)0x07, (byte)0xDE, (byte)0x08, (byte)0x13,
			(byte)0x01, (byte)0x13, (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x02,
			(byte)0x1C, (byte)0x01, (byte)0x06, (byte)0x00, (byte)0x00, (byte)0x01,
			(byte)0xF0, (byte)0x02, (byte)0x02, (byte)0x09, (byte)0x0C, (byte)0x07,
			(byte)0xDE, (byte)0x08, (byte)0x13, (byte)0x01, (byte)0x12, (byte)0x00,
			(byte)0x00, (byte)0xFF, (byte)0x02, (byte)0x1C, (byte)0x01, (byte)0x06,
			(byte)0x00, (byte)0x00, (byte)0x01, (byte)0xEF, (byte)0x02, (byte)0x02,
			(byte)0x09, (byte)0x0C, (byte)0x07, (byte)0xDE, (byte)0x08, (byte)0x13,
			(byte)0x01, (byte)0x11, (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x02,
			(byte)0x1C, (byte)0x01, (byte)0x06, (byte)0x00, (byte)0x00, (byte)0x01,
			(byte)0xED, (byte)0x02, (byte)0x02, (byte)0x09, (byte)0x0C, (byte)0x07,
			(byte)0xDE, (byte)0x08, (byte)0x13, (byte)0x01, (byte)0x10, (byte)0x00,
			(byte)0x00, (byte)0xFF, (byte)0x02, (byte)0x1C, (byte)0x01, (byte)0x06,
			(byte)0x00, (byte)0x00, (byte)0x01, (byte)0xEC, (byte)0x02, (byte)0x02,
			(byte)0x09, (byte)0x0C, (byte)0x07, (byte)0xDE, (byte)0x08, (byte)0x13,
			(byte)0x01, (byte)0x0F, (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x02,
			(byte)0x1C, (byte)0x01, (byte)0x06, (byte)0x00, (byte)0x00, (byte)0x01,
			(byte)0xEA, (byte)0x02, (byte)0x02, (byte)0x09, (byte)0x0C, (byte)0x07,
			(byte)0xDE, (byte)0x08, (byte)0x13, (byte)0x01, (byte)0x0E, (byte)0x00,
			(byte)0x00, (byte)0xFF, (byte)0x02, (byte)0x1C, (byte)0x01, (byte)0x06,
			(byte)0x00, (byte)0x00, (byte)0x01, (byte)0xE9, (byte)0x02, (byte)0x02,
			(byte)0x09, (byte)0x0C, (byte)0x07, (byte)0xDE, (byte)0x08, (byte)0x13,
			(byte)0x01, (byte)0x0D, (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x02,
			(byte)0x1C, (byte)0x01, (byte)0x06, (byte)0x00, (byte)0x00, (byte)0x01,
			(byte)0xE7, (byte)0x02, (byte)0x02, (byte)0x09, (byte)0x0C, (byte)0x07,
			(byte)0xDE, (byte)0x08, (byte)0x13, (byte)0x01, (byte)0x0C, (byte)0x00,
			(byte)0x00, (byte)0xFF, (byte)0x02, (byte)0x1C, (byte)0x01, (byte)0x06,
			(byte)0x00, (byte)0x00, (byte)0x01, (byte)0xE5, (byte)0x02, (byte)0x02,
			(byte)0x09, (byte)0x0C, (byte)0x07, (byte)0xDE, (byte)0x08, (byte)0x13,
			(byte)0x01, (byte)0x0B, (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x02,
			(byte)0x1C, (byte)0x01, (byte)0x06, (byte)0x00, (byte)0x00, (byte)0x01,
			(byte)0xE2, (byte)0x02, (byte)0x02, (byte)0x09, (byte)0x0C, (byte)0x07,
			(byte)0xDE, (byte)0x08, (byte)0x13, (byte)0x01, (byte)0x0A, (byte)0x00,
			(byte)0x00, (byte)0xFF, (byte)0x02, (byte)0x1C, (byte)0x01, (byte)0x06,
			(byte)0x00, (byte)0x00, (byte)0x01, (byte)0xDE, (byte)0x02, (byte)0x02,
			(byte)0x09, (byte)0x0C, (byte)0x07, (byte)0xDE, (byte)0x08, (byte)0x13,
			(byte)0x01, (byte)0x09, (byte)0x37, (byte)0x08, (byte)0xFF, (byte)0x02,
			(byte)0x1C, (byte)0x01, (byte)0x06, (byte)0x00, (byte)0x00, (byte)0x01,
			(byte)0xDE, (byte)0x02, (byte)0x02, (byte)0x09, (byte)0x0C, (byte)0x07,
			(byte)0xD0, (byte)0x01, (byte)0x01, (byte)0x06, (byte)0x14, (byte)0x17,
			(byte)0x3A, (byte)0xFF, (byte)0x02, (byte)0x1C, (byte)0x01, (byte)0x06,
			(byte)0x00, (byte)0x00, (byte)0x01, (byte)0xDE, (byte)0x02, (byte)0x02,
			(byte)0x09, (byte)0x0C, (byte)0x07, (byte)0xD0, (byte)0x01, (byte)0x01,
			(byte)0x06, (byte)0x14, (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x02,
			(byte)0x1C, (byte)0x02, (byte)0x06, (byte)0x00, (byte)0x00, (byte)0x01,
			(byte)0xDC, (byte)0x02, (byte)0x02, (byte)0x09, (byte)0x0C, (byte)0x07,
			(byte)0xD0, (byte)0x01, (byte)0x01, (byte)0x06, (byte)0x13, (byte)0x00,
			(byte)0x00, (byte)0xFF, (byte)0x02, (byte)0x1C, (byte)0x02, (byte)0x06,
			(byte)0x00, (byte)0x00, (byte)0x01, (byte)0xD8, (byte)0x02, (byte)0x02,
			(byte)0x09, (byte)0x0C, (byte)0x07, (byte)0xD0, (byte)0x01, (byte)0x01,
			(byte)0x06, (byte)0x12, (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x02,
			(byte)0x1C, (byte)0x02, (byte)0x06, (byte)0x00, (byte)0x00, (byte)0x01,
			(byte)0xD4, (byte)0x02, (byte)0x02, (byte)0x09, (byte)0x0C, (byte)0x07,
			(byte)0xD0, (byte)0x01, (byte)0x01, (byte)0x06, (byte)0x11, (byte)0x00,
			(byte)0x00, (byte)0xFF, (byte)0x02, (byte)0x1C, (byte)0x02, (byte)0x06,
			(byte)0x00, (byte)0x00, (byte)0x01, (byte)0xD1, (byte)0x02, (byte)0x02,
			(byte)0x09, (byte)0x0C, (byte)0x07, (byte)0xD0, (byte)0x01, (byte)0x01,
			(byte)0x06, (byte)0x10, (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x02,
			(byte)0x1C, (byte)0x02, (byte)0x06, (byte)0x00, (byte)0x00, (byte)0x01,
			(byte)0xCD, (byte)0x02, (byte)0x02, (byte)0x09, (byte)0x0C, (byte)0x07,
			(byte)0xD0, (byte)0x01, (byte)0x01, (byte)0x06, (byte)0x0F, (byte)0x00,
			(byte)0x00, (byte)0xFF, (byte)0x02, (byte)0x1C, (byte)0x02, (byte)0x06,
			(byte)0x00, (byte)0x00, (byte)0x01, (byte)0xC9, (byte)0x02, (byte)0x02,
			(byte)0x09, (byte)0x0C, (byte)0x07, (byte)0xD0, (byte)0x01, (byte)0x01,
			(byte)0x06, (byte)0x0E, (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x02,
			(byte)0x1C, (byte)0x02, (byte)0x06, (byte)0x00, (byte)0x00, (byte)0x01,
			(byte)0xC5, (byte)0x02, (byte)0x02, (byte)0x09, (byte)0x0C, (byte)0x07,
			(byte)0xD0, (byte)0x01, (byte)0x01, (byte)0x06, (byte)0x0D, (byte)0x00,
			(byte)0x00, (byte)0xFF, (byte)0x02, (byte)0x1C, (byte)0x02, (byte)0x06,
			(byte)0x00, (byte)0x00, (byte)0x01, (byte)0xC1, (byte)0x02, (byte)0x02,
			(byte)0x09, (byte)0x0C, (byte)0x07, (byte)0xD0, (byte)0x01, (byte)0x01,
			(byte)0x06, (byte)0x0C, (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x02,
			(byte)0x1C, (byte)0x02, (byte)0x06, (byte)0x00, (byte)0x00, (byte)0x01,
			(byte)0xBE, (byte)0xF2, (byte)0xA0, (byte)0x34, (byte)0x03
		};
	
	
	@Test
	public void getTotalLength() {
		try {
	        IoBuffer buffer = IoBuffer.wrap(rawData);       
			System.out.println(Hex.decode(rawData));
			
	        EMnVGeneralFrameDecoder d = new EMnVGeneralFrameDecoder();
			int result = d.getTotalLength(buffer, 0);
	        System.out.println(result);
			
		} catch (Exception e) {
		}
	}
	
	@Test
	public void doDecode(){
		try {
	        IoBuffer buffer = IoBuffer.wrap(rawData);       
			System.out.println(Hex.decode(rawData));
			
	        EMnVGeneralFrameDecoder d = new EMnVGeneralFrameDecoder();
			boolean result = d.doDecode(null, buffer, null, 0);
	        System.out.println(result);
			
		} catch (Exception e) {
		}
	}
	
	@Test
	public void setData(){
		String data

		DLMSEMnVGtype dlms = new DLMSEMnVGtype();
		try {
			dlms.parse(Hex.encode(data));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

}
