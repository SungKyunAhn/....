package com.aimir.fep.protocol.fmp.frame.service.entry;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;

import com.aimir.fep.protocol.fmp.datatype.BYTE;
import com.aimir.fep.protocol.fmp.datatype.HEX;
import com.aimir.fep.protocol.fmp.datatype.OCTET;
import com.aimir.fep.protocol.fmp.datatype.TIMESTAMP;
import com.aimir.fep.protocol.fmp.datatype.WORD;
import com.aimir.fep.protocol.fmp.frame.service.Entry;

/**
 * codiEntry
 * generated by MIB Tool, Do not modify
 *
 * @author Y.S Kim (sorimo@nuritelecom.com)
 * @version $Rev: 1 $, $Date: 2005-11-21 15:59:15 +0900 $,
 * <pre>
 * &lt;complexType name="ffdEntry">
 *   &lt;complexContent>
 *     &lt;extension base="{http://server.ws.command.fep.aimir.com/}entry">
 *       &lt;sequence>
 *         &lt;element name="ffdID" type="{http://server.ws.command.fep.aimir.com/}hex" minOccurs="0"/>
 *         &lt;element name="ffdModel" type="{http://server.ws.command.fep.aimir.com/}octet" minOccurs="0"/>
 *         &lt;element name="ffdLastPoll" type="{http://server.ws.command.fep.aimir.com/}timestamp" minOccurs="0"/>
 *         &lt;element name="ffdLastPush" type="{http://server.ws.command.fep.aimir.com/}timestamp" minOccurs="0"/>
 *         &lt;element name="ffdHwVersion" type="{http://server.ws.command.fep.aimir.com/}word" minOccurs="0"/>
 *         &lt;element name="ffdFwVersion" type="{http://server.ws.command.fep.aimir.com/}word" minOccurs="0"/>
 *         &lt;element name="ffdFwBuild" type="{http://server.ws.command.fep.aimir.com/}word" minOccurs="0"/>
 *         &lt;element name="ffdPowerType" type="{http://server.ws.command.fep.aimir.com/}byte" minOccurs="0"/>
 *         &lt;element name="ffdPermitMode" type="{http://server.ws.command.fep.aimir.com/}byte" minOccurs="0"/>
 *         &lt;element name="ffdPermitState" type="{http://server.ws.command.fep.aimir.com/}byte" minOccurs="0"/>
 *         &lt;element name="ffdMaxChildTbl" type="{http://server.ws.command.fep.aimir.com/}byte" minOccurs="0"/>
 *         &lt;element name="ffdCurrentChild" type="{http://server.ws.command.fep.aimir.com/}byte" minOccurs="0"/>
 *         &lt;element name="ffdAlarmMask" type="{http://server.ws.command.fep.aimir.com/}word" minOccurs="0"/>
 *         &lt;element name="ffdAlarmFlag" type="{http://server.ws.command.fep.aimir.com/}byte" minOccurs="0"/>
 *         &lt;element name="ffdTestFlag" type="{http://server.ws.command.fep.aimir.com/}byte" minOccurs="0"/>
 *         &lt;element name="ffdSolarAdVolt" type="{http://server.ws.command.fep.aimir.com/}word" minOccurs="0"/>
 *         &lt;element name="ffdSolarChgBattVolt" type="{http://server.ws.command.fep.aimir.com/}word" minOccurs="0"/>
 *         &lt;element name="ffdSolarBoardVolt" type="{http://server.ws.command.fep.aimir.com/}word" minOccurs="0"/>
 *         &lt;element name="ffdSolarBattChgState" type="{http://server.ws.command.fep.aimir.com/}byte" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ffdEntry", propOrder = {
    "ffdID",
    "ffdModel",
    "ffdLastPoll",
    "ffdLastPush",
    "ffdHwVersion",
    "ffdFwVersion",
    "ffdFwBuild",
    "ffdPowerType",
    "ffdPermitMode",
    "ffdPermitState",
    "ffdMaxChildTbl",
    "ffdCurrentChild",
    "ffdAlarmMask",
    "ffdAlarmFlag",
    "ffdTestFlag",
    "ffdSolarAdVolt",
    "ffdSolarChgBattVolt",
    "ffdSolarBoardVolt",
    "ffdSolarBattChgState"
})
public class ffdEntry extends Entry {

    public HEX ffdID = new HEX(8); 
    public OCTET ffdModel = new OCTET(18);
    public TIMESTAMP ffdLastPoll = new TIMESTAMP(7);
    public TIMESTAMP ffdLastPush = new TIMESTAMP(7);
    public WORD ffdHwVersion = new WORD();
    public WORD ffdFwVersion = new WORD();
    public WORD ffdFwBuild = new WORD();
    public BYTE ffdPowerType = new BYTE();
    public BYTE ffdPermitMode = new BYTE();
    public BYTE ffdPermitState = new BYTE();
    public BYTE ffdMaxChildTbl = new BYTE();
    public BYTE ffdCurrentChild = new BYTE();
    public WORD ffdAlarmMask = new WORD();
    public BYTE ffdAlarmFlag = new BYTE();
    public BYTE ffdTestFlag = new BYTE();
    public WORD ffdSolarAdVolt = new WORD();
    public WORD ffdSolarChgBattVolt = new WORD();
    public WORD ffdSolarBoardVolt = new WORD();
    public BYTE ffdSolarBattChgState = new BYTE();

    @XmlTransient
    public HEX getFfdID()
    {
        return ffdID;
    }

    public void setFfdID(HEX ffdID)
    {
        this.ffdID = ffdID;
    }

    @XmlTransient
    public OCTET getFfdModel()
    {
        return ffdModel;
    }

    public void setFfdModel(OCTET ffdModel)
    {
        this.ffdModel = ffdModel;
    }

    @XmlTransient
    public TIMESTAMP getFfdLastPoll()
    {
        return ffdLastPoll;
    }

    public void setFfdLastPoll(TIMESTAMP ffdLastPoll)
    {
        this.ffdLastPoll = ffdLastPoll;
    }

    @XmlTransient
    public TIMESTAMP getFfdLastPush()
    {
        return ffdLastPush;
    }

    public void setFfdLastPush(TIMESTAMP ffdLastPush)
    {
        this.ffdLastPush = ffdLastPush;
    }

    @XmlTransient
    public WORD getFfdHwVersion()
    {
        return ffdHwVersion;
    }

    public void setFfdHwVersion(WORD ffdHwVersion)
    {
        this.ffdHwVersion = ffdHwVersion;
    }

    @XmlTransient
    public WORD getFfdFwVersion()
    {
        return ffdFwVersion;
    }

    public void setFfdFwVersion(WORD ffdFwVersion)
    {
        this.ffdFwVersion = ffdFwVersion;
    }

    @XmlTransient
    public WORD getFfdFwBuild()
    {
        return ffdFwBuild;
    }

    public void setFfdFwBuild(WORD ffdFwBuild)
    {
        this.ffdFwBuild = ffdFwBuild;
    }

    @XmlTransient
    public BYTE getFfdPowerType()
    {
        return ffdPowerType;
    }

    public void setFfdPowerType(BYTE ffdPowerType)
    {
        this.ffdPowerType = ffdPowerType;
    }

    @XmlTransient
    public BYTE getFfdPermitMode()
    {
        return ffdPermitMode;
    }

    public void setFfdPermitMode(BYTE ffdPermitMode)
    {
        this.ffdPermitMode = ffdPermitMode;
    }

    @XmlTransient
    public BYTE getFfdPermitState()
    {
        return ffdPermitState;
    }

    public void setFfdPermitState(BYTE ffdPermitState)
    {
        this.ffdPermitState = ffdPermitState;
    }

    @XmlTransient
    public BYTE getFfdMaxChildTbl()
    {
        return ffdMaxChildTbl;
    }

    public void setFfdMaxChildTbl(BYTE ffdMaxChildTbl)
    {
        this.ffdMaxChildTbl = ffdMaxChildTbl;
    }

    @XmlTransient
    public BYTE getFfdCurrentChild()
    {
        return ffdCurrentChild;
    }

    public void setFfdCurrentChild(BYTE ffdCurrentChild)
    {
        this.ffdCurrentChild = ffdCurrentChild;
    }

    @XmlTransient
    public WORD getFfdAlarmMask()
    {
        return ffdAlarmMask;
    }

    public void setFfdAlarmMask(WORD ffdAlarmMask)
    {
        this.ffdAlarmMask = ffdAlarmMask;
    }

    @XmlTransient
    public BYTE getFfdAlarmFlag()
    {
        return ffdAlarmFlag;
    }

    public void setFfdAlarmFlag(BYTE ffdAlarmFlag)
    {
        this.ffdAlarmFlag = ffdAlarmFlag;
    }

    @XmlTransient
    public BYTE getFfdTestFlag()
    {
        return ffdTestFlag;
    }

    public void setFfdTestFlag(BYTE ffdTestFlag)
    {
        this.ffdTestFlag = ffdTestFlag;
    }

    @XmlTransient
    public WORD getFfdSolarAdVolt()
    {
        return ffdSolarAdVolt;
    }

    public void setFfdSolarAdVolt(WORD ffdSolarAdVolt)
    {
        this.ffdSolarAdVolt = ffdSolarAdVolt;
    }

    @XmlTransient
    public WORD getFfdSolarChgBattVolt()
    {
        return ffdSolarChgBattVolt;
    }

    public void setFfdSolarChgBattVolt(WORD ffdSolarChgBattVolt)
    {
        this.ffdSolarChgBattVolt = ffdSolarChgBattVolt;
    }

    @XmlTransient
    public WORD getFfdSolarBoardVolt()
    {
        return ffdSolarBoardVolt;
    }

    public void setFfdSolarBoardVolt(WORD ffdSolarBoardVolt)
    {
        this.ffdSolarBoardVolt = ffdSolarBoardVolt;
    }

    @XmlTransient
    public BYTE getFfdSolarBattChgState()
    {
        return ffdSolarBattChgState;
    }

    public void setFfdSolarBattChgState(BYTE ffdSolarBattChgState)
    {
        this.ffdSolarBattChgState = ffdSolarBattChgState;
    }

    public String toString()
    {
        StringBuffer sb = new StringBuffer();

		sb.append("CLASS["+this.getClass().getName()+"]\n");
        sb.append("ffdID: " + ffdID + "\n");
        sb.append("ffdModel: " + ffdModel + "\n");
        sb.append("ffdLastPoll: " + ffdLastPoll + "\n");
        sb.append("ffdLastPush: " + ffdLastPush + "\n");
        sb.append("ffdHwVersion: " + ffdHwVersion + "\n");
        sb.append("ffdFwVersion: " + ffdFwVersion + "\n");
        sb.append("ffdFwBuild: " + ffdFwBuild + "\n");
        sb.append("ffdPowerType: " + ffdPowerType + "\n");
        sb.append("ffdPermitMode: " + ffdPermitMode + "\n");
        sb.append("ffdPermitState: " + ffdPermitState + "\n");
        sb.append("ffdMaxChildTbl: " + ffdMaxChildTbl + "\n");
        sb.append("ffdCurrentChild: " + ffdCurrentChild + "\n");
        sb.append("ffdAlarmMask: " + ffdAlarmMask + "\n");
        sb.append("ffdAlarmFlag: " + ffdAlarmFlag + "\n");
        sb.append("ffdTestFlag: " + ffdTestFlag + "\n");
        sb.append("ffdSolarAdVolt: " + ffdSolarAdVolt + "\n");
        sb.append("ffdSolarChgBattVolt: " + ffdSolarChgBattVolt + "\n");
        sb.append("ffdSolarBoardVolt: " + ffdSolarBoardVolt + "\n");
        sb.append("ffdSolarBattChgState: " + ffdSolarBattChgState + "\n");

        return sb.toString();
    }
}
