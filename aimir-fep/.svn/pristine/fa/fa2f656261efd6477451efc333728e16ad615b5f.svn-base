package com.aimir.fep.meter;

import java.util.Date;
import java.util.Iterator;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.junit.Ignore;
import org.junit.Test;

import com.aimir.fep.meter.parser.Kamstrup;
import com.aimir.fep.meter.parser.Kamstrup162;
import com.aimir.fep.meter.parser.KamstrupOmniPower;
import com.aimir.fep.meter.parser.KamstrupV2;
import com.aimir.fep.util.Hex;
import com.aimir.util.DateTimeUtil;

public class KamstrupMetaTest {
    private static Log log = LogFactory.getLog(KamstrupMetaTest.class);

    @Ignore
    public void test() {
        String meta
        Kamstrup kams = new Kamstrup();
        try {
            kams.parse(Hex.encode(meta));
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    @Ignore
    public void test5133() throws Exception {
        byte[] b = Hex.encode
        
        Kamstrup162 k162 = new Kamstrup162("18011996");
        k162.parse(b);
        k162.setMeteringTime(DateTimeUtil.getDateString(new Date()));
        
        Map map = k162.getData();
        Object key = null;
        for (Iterator i = map.keySet().iterator(); i.hasNext(); ) {
            key = i.next();
            log.info(key + "=" + map.get(key));
        }
    }
    
    @Ignore
    public void testv2() throws Exception {
        byte[] b = Hex.encode
        
        KamstrupV2 k162 = new KamstrupV2("18011996");
        k162.parse(b);
        k162.setMeteringTime(DateTimeUtil.getDateString(new Date()));
        
        Map map = k162.getData();
        Object key = null;
        for (Iterator i = map.keySet().iterator(); i.hasNext(); ) {
            key = i.next();
            log.info(key + "=" + map.get(key));
        }
    }
    
    @Test
    public void test_omnipower() throws Exception {
        byte[] b = Hex.encode
        
        KamstrupOmniPower omni = new KamstrupOmniPower("19321919");
        omni.parse(b);
        omni.setMeteringTime(DateTimeUtil.getDateString(new Date()));
        
        Map map = omni.getData();
        Object key = null;
        for (Iterator i = map.keySet().iterator(); i.hasNext(); ) {
            key = i.next();
            log.info(key + "=" + map.get(key));
        }
    }
}
