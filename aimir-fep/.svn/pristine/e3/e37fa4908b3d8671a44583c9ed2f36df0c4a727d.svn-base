package com.aimir.fep.protocol.smsp.command.frame.sms;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.aimir.fep.protocol.smsp.SMSConstants.ERROR_TYPE;

/** 
 * ResponseFrame 
 * 
 * @version     1.0  2016.07.23 
 * @author		Sung Han LIM 
 */

public class ResponseFrame {
	private static Log log = LogFactory.getLog(ResponseFrame.class);
	private static final String SUCCESS_RESPONSE = "2";
	private static final String BAD_RESPONSE = "3";
	
	public Map<String,Object> decode(String result) throws Exception {
    	Map<String, Object> resultMap = new HashMap<String,Object>();
    	
    	if (result == null) {
			resultMap.put("messageType", BAD_RESPONSE);
			resultMap.put("errorCode", "The returned SMS is empty.");
	
			return resultMap;
		}

		String startFlag = result.substring(0, 1);
		String euiId = result.substring(1, 17);
		String messageType = result.substring(17, 18);
		String sequence = result.substring(18, 33);
		String commandNumber;
		String endFlag;

		resultMap.put("startFlag", startFlag);
		resultMap.put("euiId", euiId);
		resultMap.put("messageType", messageType);
		resultMap.put("sequence", sequence);

    	/** Response Frame Format - FAIL **/
		if (messageType == BAD_RESPONSE) {
			String errorCode = result.substring(33, 35);
			commandNumber = result.substring(35, 37);
			endFlag = result.substring(37, 38);
			
			if (errorCode.equals(ERROR_TYPE.INVALID_FORMAT.getTypeCode())) {
				resultMap.put("errorCode", "INVALID FRAME FORMAT");
			} else if (errorCode.equals(ERROR_TYPE.WRONG_HASH_CODE.getTypeCode())) {
				resultMap.put("errorCode", "WRONG HASH-CODE");
			} else if (errorCode.equals(ERROR_TYPE.CHECK_FAIL_MOBILE_MODULE.getTypeCode())) {
				resultMap.put("errorCode", "FAIL TO CHECK MOBILE MODULE INFORMATION");
			} else if (errorCode.equals(ERROR_TYPE.OUTSTANDING_WATCHDOG_REQUEST.getTypeCode())) {
				resultMap.put("errorCode", "WATCHDOG REQUEST OUTSTANDING - WATCHDOG STATE IS INACTIVE");
			} else if (errorCode.equals(ERROR_TYPE.BUSY_FOR_METERING_TASK.getTypeCode())) {
				resultMap.put("errorCode", "SMS REQUEST OUTSTANDING - METERING TASK IS IN PROGRESS");
			} else if (errorCode.equals(ERROR_TYPE.BUSY_FOR_NI_COMM.getTypeCode())) {
				resultMap.put("errorCode", "SMS REQUEST OUTSTANDING - NI COMMUNICATION IS IN PROGRESS");
			} else if (errorCode.equals(ERROR_TYPE.BUSY_FOR_COAP_COMM.getTypeCode())) {
				resultMap.put("errorCode", "SMS REQUEST OUTSTANDING - CoAP COMMUNICATION IS IN PROGRESS");
			} else if (errorCode.equals(ERROR_TYPE.BUSY_FOR_MODEM_INIT.getTypeCode())) {
				resultMap.put("errorCode", "SMS REQUEST OUTSTANDING - MODEM INITIALIZATION IS IN PROGRESS");
			} else if (errorCode.equals(ERROR_TYPE.BUSY_FOR_SNMP_COMM.getTypeCode())) {
				resultMap.put("errorCode", "SMS REQUEST OUTSTANDING - SNMP COMMUNICATION IS IN PROGRESS");
			} else {
				resultMap.put("errorCode", errorCode);
			}

			resultMap.put("command", commandNumber);
			resultMap.put("endFlag", endFlag);
		} else {
			/** Response Frame Format - SUCCESS **/
			if (result.length() == 36) { // CASE 1) no parameter
				commandNumber = result.substring(33, 35);
				endFlag = result.substring(35, 36);
				
				resultMap.put("command", commandNumber);
				resultMap.put("endFlag", endFlag);
			} else { // CASE 2) with parameter 
				// result.length() - 1	를 하는 이유는 마지막 endFlag('#')을 제거하고 순수 파라메터만 넘겨주기 위함
				
				commandNumber = result.substring(33, 35);
				
				resultMap.put("command", commandNumber);
				resultMap.put("endFlag", result.charAt(result.length() - 1));

				List<String> response_paramList = new ArrayList<String>();
				String parameters = result.substring(35, result.length() - 1);
				String[] paramArray = parameters.split(",");
				
				for (int i = 0; i < paramArray.length; i++) {
					response_paramList.add(paramArray[i]);
				}
				
				resultMap.put("paramList", response_paramList);
			}
			
		}
    	
		return resultMap;
	}
	
}
