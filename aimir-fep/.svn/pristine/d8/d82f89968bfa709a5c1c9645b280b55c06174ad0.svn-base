package com.aimir.fep.tool;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.transaction.TransactionStatus;

import com.aimir.dao.device.MeterDao;
import com.aimir.fep.command.mbean.CommandGW;
import com.aimir.fep.command.ws.client.ResponseMap;
import com.aimir.fep.meter.data.MeterData;
import com.aimir.fep.util.DataUtil;
import com.aimir.model.device.MCU;
import com.aimir.model.device.Meter;
import com.aimir.model.device.Modem;
import com.aimir.util.Condition;
import com.aimir.util.Condition.Restriction;


/**
 * Running Execute DmdNiGet or DmdNiSet
 * @author 
 * arg[0]=={modemId} arg[1]=={requestType} arg[2]=={attributeId} arg[3]=={param}
 */

public class ExecDmdNiCommand 
{
	private static Log log = LogFactory.getLog(ExecDmdNiCommand.class);
	
	
	
	private void execCommand(String modemId, String requestType, String attrId, String param) {
		ApplicationContext ctx = new ClassPathXmlApplicationContext(new String[] { "/config/spring-fep-schedule.xml" });
		DataUtil.setApplicationContext(ctx);
		
		CommandGW gw = DataUtil.getBean(CommandGW.class);
					
		log.info("Execute start...");

		try {		
			Map<String, String> result = new HashMap<String, String>();
			result = gw.cmdExecDmdNiCommand(modemId,requestType,attrId, param);
	
	        for (Map.Entry<String, String> e : result.entrySet()) {
	            log.debug("[MODEM ID:" + modemId + "] REQUEST TYPE: " + requestType + "] key["+e.getKey()+"], value["+ e.getValue()+"]");
	        }		
		}catch(Exception e){
			log.error(e,e);
		}		
		log.info("All job is finish");
		
	}
	

	
	public static void main(String[] args) {
		log.info("ARG_0[" + args[0] + "] ARG_1[" + args[1] + "] ARG_2[" + args[2] + "] ARG_3[" + args[3] + "]");		
				
		String modemId = args[0];
		String requestType = args[1];
		String attrId = args[2];
		String attrParam = args[3];
		
		ExecDmdNiCommand forJob = new ExecDmdNiCommand();
		forJob.execCommand(modemId, requestType, attrId, attrParam);
		System.exit(0);						
	}		
	
}
