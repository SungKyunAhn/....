package com.aimir.fep.protocol.fmp.client;

import java.io.ByteArrayOutputStream;
import java.text.DecimalFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Random;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.junit.Ignore;
import org.junit.Test;

import com.aimir.constants.CommonConstants.McuType;
import com.aimir.fep.BaseTestCase;
import com.aimir.fep.meter.parser.DLMS;
import com.aimir.fep.meter.parser.plc.BData;
import com.aimir.fep.meter.parser.plc.BDataRequest;
import com.aimir.fep.meter.parser.plc.PLCDataConstants;
import com.aimir.fep.meter.parser.plc.PLCDataFrame;
import com.aimir.fep.protocol.fmp.client.lan.LANClient;
import com.aimir.fep.protocol.fmp.client.lan.LANPLCClient;
import com.aimir.fep.protocol.fmp.common.LANTarget;
import com.aimir.fep.protocol.fmp.datatype.WORD;
import com.aimir.fep.protocol.fmp.frame.service.MDData;
import com.aimir.fep.protocol.fmp.frame.service.RMDData;
import com.aimir.fep.util.DataUtil;
import com.aimir.fep.util.Hex;
import com.aimir.util.DateTimeUtil;

public class MeterDataTest extends BaseTestCase {
    private static Log log = LogFactory.getLog(MeterDataTest.class);
    private static String MCUID="11010";
    
    @Test
    public void test_Elster1700() {
        try {
            DataUtil.setApplicationContext(this.applicationContext);
            LANTarget target = new LANTarget("187.1.10.58",8000);
            target.setTargetId(MCUID);
            LANClient client = new LANClient(target); // ClientFactory.getClient(target);
            
            MDData mdData = new MDData();
            mdData.setCnt(new WORD(1));
            StringBuffer mdBuf = new StringBuffer();
            mdBuf.append("343530303031303231313430303734000000000007db0602021e260d00004d540110456c737465722d413137303035313530353939380000000000000000592910c266001100000000002248000000000022410000000000218900ff000000000000000002120520000000021232810000000212481600ff00000000000000000000031200000000000312000000000003050000000000093280000000000351800000000003588000000000034680000000001059000000000004710000000000046800000000000463000000000014060400000000661104000000006591040000000065720400000000662800ff000000000000ff000000000000ff000000000000ff000000000000000000040000000000000500000000000004000000ff0000000000001001000010010005000000054244035fe6e44d07403009000000007809e54d0700320900000000a833e54da2bc4d0081e54d010081e54d4c44053ae40081e54d003f9900707200000000000000000000000000296000007248000000000000000000000000002952000074000000000000000000000000000029680000744800000000000000000000000000296800007192000000000000000000000000002960000075280000000000000000000000000030080000703200000000000000000000000000296800007536000000000000000000000000003016000074000000000000000000000000000029840000719200000000000000000000000000297600007176000000000000000000000000002984000074640000000000000000000000000029920000757600000000000000000000000000297600007248000000000000000000000000002952000074000000000000000000000000000029760000736000000000000000000000000000299200007120000000000000000000000000002944000076160000000000000000000000000029920000888000000000000000000000000000300000009296000000000000000000000000003032000093120000000000000000000000000030080000842400000000000000000000000000292000009304000000000000000000000000002984000090640000000000000000000000000029920000800000000000000000000000000000295200009312000000000000000000000000003080000092960000000000000000000000000030160000920800000000000000000000000000304000008640000000000000000000000000003064000087760000000000000000000000000030560000899200000000000000000000000000298400009000000000000000000000000000002992000085520000000000000000000000000029760000926400000000000000000000000000305600e62875e64de52e75e64d0092480000000000000000000000000030720000923200000000000000000000000000308000008208000000000000000000000000003024000071440000000000000000000000000029360000726400000000000000000000000000288800007128000000000000000000000000002880000070640000000000000000000000000028720000741600000000000000000000000000292000007504000000000000000000000000002920000072400000000000000000000000000029600000692800000000000000000000000000292000007344000000000000000000000000002952000072720000000000000000000000000029520000747200000000000000000000000000295200e480d2e64d003fff454c00b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004002875e64d37cde34d0cb8e34d37ade34d000000000400200000002875e64d37cde34d0cb8e34d37ade34d000000002e75e64d3fcde34d15b8e34d40ade34d000000007a5c");
            
            byte[] md = Hex.encode(mdBuf.toString());
            mdData.setMdData(md);
            mdData.setMcuId(MCUID);
            client.sendMD(mdData);
            client.close();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }    
  //@Test
    public void test_PLCDataCommandFrame() {
        try {
            log.info("targetIp="+System.getProperty("targetIp") + ", port=" + System.getProperty("targetPort"));
            LANTarget target = new LANTarget(System.getProperty("targetIp"),Integer.parseInt(System.getProperty("targetPort")));
            target.setTargetId(MCUID);
            target.setTargetType(McuType.DCU);
            target.setTargetType(McuType.Outdoor);
            //target.setMcuSwRevision("test");
            log.info("targetType : "+target.getTargetType());
            LANPLCClient client = (LANPLCClient) ClientFactory.getClient(target);            
            PLCDataFrame bDataReq = new BDataRequest(PLCDataConstants.SOF, PLCDataConstants.PROTOCOL_DIRECTION_FEP_IRM, PLCDataConstants.PROTOCOL_VERSION_1_0, "DCU", "SERVER", PLCDataConstants.BDATAREQUEST_LENGTH_VALUE);                                    
            client.sendCommand(bDataReq);
            client.close();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    //@Test
    public void test_PLCDataIRMConf() {
        try {        	
            log.info("targetIp="+System.getProperty("targetIp") + ", port=" + System.getProperty("targetPort"));
            LANTarget target = new LANTarget(System.getProperty("targetIp"),Integer.parseInt(System.getProperty("targetPort")));
            target.setTargetId(MCUID);
            target.setTargetType(McuType.DCU);                        
            log.info("Test targetType : "+target.getTargetType());
            LANPLCClient client = (LANPLCClient) ClientFactory.getClient(target);            
            BData bd = new BData(new PLCDataFrame(PLCDataConstants.SOF, PLCDataConstants.PROTOCOL_DIRECTION_FEP_IRM, PLCDataConstants.PROTOCOL_VERSION_1_0, "DCU", "SERVER", PLCDataConstants.COMMAND_LEN+PLCDataConstants.BDATA_TOTAL_LEN+PLCDataConstants.CRC_LEN, PLCDataConstants.COMMAND_b, 
            		Hex.encode("ffffffffffff00000000ffffffffffff00000000112233445566050811071305011001000000000001")));
            client.sendPLCDataFrame(bd);
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    //@Test
    public void test_kv2c() {
        try {
            log.info("targetIp="+System.getProperty("targetIp") + ", port=" + System.getProperty("targetPort"));
            LANTarget target = new LANTarget(System.getProperty("targetIp"),Integer.parseInt(System.getProperty("targetPort")));
            target.setTargetId(MCUID);
            Client client = ClientFactory.getClient(target);
            
            MDData mdData = new MDData();
            mdData.setCnt(new WORD(1));
            String timestamp = DateTimeUtil.getDateString(new Date());
            byte[] year2 = DataUtil.get2ByteToInt(Integer.parseInt(timestamp.substring(0, 4)));
            DataUtil.convertEndian(year2);
            String hYear2 = Hex.decode(year2);
            String hYear1 = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(2, 4)))});
            String hMonth = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(4, 6)))});
            String hDay = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(6, 8)))});
            String hHour = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(8, 10)))});
            String hMin = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(10, 12)))});
            String hSec = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(12, 14)))});
            
            StringBuffer mdBuf = new StringBuffer();
            mdBuf.append("000000000000000032303039303433303031303000000000000000000B01020100A805");
            mdBuf.append(hYear2 + hMonth + hDay + hHour + hMin + hSec); // md data timestamp
            mdBuf.append("4E47324132023031303938303430363233000000000000840E00000000004D544959003E47452020534D333030202020323030393034333030313030303433200100000000");
            mdBuf.append(hYear1 + hMonth + hDay + hHour + hMin + hSec); // meter time
            mdBuf.append
            mdBuf.append(hYear1 + hMonth + hDay + hHour + hMin); // lp time
            mdBuf.append
            byte[] md = Hex.encode(mdBuf.toString());
            mdData.setMdData(md);
            mdData.setMcuId(MCUID);
            client.sendMD(mdData);
            client.close();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    // @Test
    public void test_aidon5530() {
        try {
            log.info("targetIp="+System.getProperty("targetIp") + ", port=" + System.getProperty("targetPort"));
            LANTarget target = new LANTarget(System.getProperty("targetIp"),Integer.parseInt(System.getProperty("targetPort")));
            target.setTargetId(MCUID);
            Client client = ClientFactory.getClient(target);
            
            MDData mdData = new MDData();
            mdData.setCnt(new WORD(1));
            String timestamp = DateTimeUtil.getDateString(new Date());
            byte[] year2 = DataUtil.get2ByteToInt(Integer.parseInt(timestamp.substring(0, 4)));
            DataUtil.convertEndian(year2);
            String hYear2 = Hex.decode(year2);
            //String hYear1 = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(2, 4)))});
            String hMonth = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(4, 6)))});
            String hDay = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(6, 8)))});
            String hHour = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(8, 10)))});
            String hMin = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(10, 12)))});
            String hSec = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(12, 14)))});
            
            StringBuffer mdBuf = new StringBuffer();
            mdBuf.append("000D6F00001E162B37333530303238363734383433313230000000000101000100AF01");
            mdBuf.append(hYear2 + hMonth + hDay + hHour + hMin + hSec); // md data timestamp
            mdBuf.append("1C020000");
            mdBuf.append(hYear2 + hMonth + hDay + hHour + hMin + hSec);
            mdBuf.append("DD020000010200");
            // 하루전
            String preDay = DateTimeUtil.getPreDay(timestamp.substring(0,8));
            byte[] year3 = DataUtil.get2ByteToInt(Integer.parseInt(preDay.substring(0,4)));
            // DataUtil.convertEndian(year3);
            String hYear3 = Hex.decode(year3);
            String hMonth3 = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(preDay.substring(4,6)))});
            String hDay3 = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(preDay.substring(6,8)))});
            log.info("LPDate[" + hYear3+hMonth3+hDay3);
            mdBuf.append(hYear3+hMonth3+hDay3);
            mdBuf.append("000002DD000000000000001A001C0009002C003D002E006000AA00E100D100000000000000000000000000000000000000000000");
            mdBuf.append(hYear3+hMonth+hDay);
            mdBuf.append
            
            byte[] md = Hex.encode(mdBuf.toString());
            mdData.setMdData(md);
            mdData.setMcuId(MCUID);
            client.sendMD(mdData);
            client.close();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    
    // @Test
    public void test_SM110() {
        try {
            log.info("targetIp="+System.getProperty("targetIp") + ", port=" + System.getProperty("targetPort"));
            LANTarget target = new LANTarget(System.getProperty("targetIp"),Integer.parseInt(System.getProperty("targetPort")));
            target.setTargetId(MCUID);
            Client client = ClientFactory.getClient(target);
            
            MDData mdData = new MDData();
            mdData.setCnt(new WORD(1));
            String timestamp = DateTimeUtil.getDateString(new Date());
            byte[] year2 = DataUtil.get2ByteToInt(Integer.parseInt(timestamp.substring(0, 4)));
            DataUtil.convertEndian(year2);
            String hYear2 = Hex.decode(year2);
            String hYear1 = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(2, 4)))});
            String hMonth = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(4, 6)))});
            String hDay = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(6, 8)))});
            String hHour = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(8, 10)))});
            String hMin = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(10, 12)))});
            String hSec = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(12, 14)))});
            
            StringBuffer mdBuf = new StringBuffer();
            
            
            String eui64 = "000B1200750C5FAA";
            String meterId = "3230303730313239313130303238320000000000";
            String sensorType = "01";
            String serviceType = "01";
            String vendor = "02";
            String dataCount = "0100";
            //String length = "A900";
            //String length = "E50A";
            String length = "D50A";
            mdBuf.append(eui64);
            mdBuf.append(meterId);
            mdBuf.append(sensorType);
            mdBuf.append(serviceType);
            mdBuf.append(vendor);
            mdBuf.append(dataCount);
            mdBuf.append(length);
            mdBuf.append(hYear2 + hMonth + hDay + hHour + hMin + hSec); // md data timestamp
            
            //metering data table
            
            mdBuf.append(GETable.S001.tableName);
            mdBuf.append("0020");//table length //미터 기본정보//불변
            mdBuf.append("47452020534D3131302020200106010032303037303132393131303032383220");
            
            mdBuf.append(GETable.S003.tableName);
            mdBuf.append("0005");//table length //미터 상태
            mdBuf.append("0100000010");
            
            mdBuf.append(GETable.S005.tableName);
            mdBuf.append("0014");//table length//미터 시리얼번호//불변
            mdBuf.append("3230303730313239313130303238322020202020");
            
            mdBuf.append(GETable.S021.tableName);
            mdBuf.append("000A");//table length//불변
            mdBuf.append("5F100205050A01041900");
            
            mdBuf.append(GETable.S022.tableName);
            mdBuf.append("001F");//table length//불변
            mdBuf.append("00FFFFFFFF28FFFFFFFF1FFFFFFFFFFFFFFFFFFFFF00000101020203030404");

            mdBuf.append(GETable.S023.tableName);
            mdBuf.append("02D6");//table length
            mdBuf.append
                      
            mdBuf.append(GETable.S025.tableName);//SELF READ TABLE
            mdBuf.append("02DC");//table length
            mdBuf.append(hYear1 + hMonth + hDay+"00000002368e360a00000000000000000000000000000000000000000000000000000807020d1ea891190000001ef3170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000368e360a00000000000000000000000000000000000000000000000000000807020d1ea891190000001ef
            
            
            mdBuf.append(GETable.S053.tableName);
            mdBuf.append("0006");//table length//불변
            mdBuf.append("FF0000FFFFFF");
            
            mdBuf.append(GETable.S055.tableName); //current meter time
            mdBuf.append("0009");//table length
            mdBuf.append(hYear1 + hMonth + hDay + hHour + hMin + hSec+ "45010F"); // md data timestamp       
            
            /**
             * ex) 
             * LP_MEMORY_LEN      : 4c fe 00 00 
             * LP_FLAGS           : 50 04 
             * LP_FORMATS         : 10 
             * LEN_NBR_BLKS_SET1  : 3c 00 
             * NBR_BLKS_INTS_SET1 : 60 00 
             * NBR_CHNS_SET1      : 04 
             * INT_TIME_SET1      : 0f
             */
            mdBuf.append(GETable.S061.tableName); 
            mdBuf.append("000d");//table length//LP Table
            mdBuf.append("b229000050041012006000021e");
            

            /*
             * 	LEN_LP_SEL_SET1        = 3;
	            LEN_INT_FMT_CDE1       = 1;
	            LEN_SCALARS_SET1       = 2;
	            LEN_DIVISOR_SET1       = 2;
             */
            mdBuf.append(GETable.S062.tableName);
            mdBuf.append("000f");//table length//LP Table
            mdBuf.append("0114000115011001000100c800c800");
            
            
            /*
             * LP_SET_STATUS_FLAG = 1
				NBR_VALID_BLOCKS   = 2
				LAST_BLOCK_ELEMENT = 2
				LAST_BLOCK_SEQ_NUM = 4
				NBR_UNREAD_BLOCKS  = 2
				NBR_VALID_INT      = 2
             */
            mdBuf.append(GETable.S063.tableName); 
            mdBuf.append("000d");
            mdBuf.append("2212001100c701000012005d00");

            mdBuf.append(GETable.S064.tableName);
            mdBuf.append("0251");//table length//LP Table

            mdBuf.append(hYear1 + hMonth + hDay + hHour + "00" + "78a3a697000000000000000000006c0000000000a700000000007300000000009000000000008200000000007d00000000009500000000006e0000000000a600000000006d00000000009d0000000000760000000000fe03000000008e0000000000070100000000fa0000000000d90000000000190100000000da00000000001c01000000007e0100000000ec0000000000fb0000000000d800000000001801000000007d0100000000e900000000001b01000000005001000000000b0100000000e40000000000f60000000000eb0000000000ae00000000003f0100000000fd00000000000d0100000000c101000000008c03000000001605000000008a01000000008d0100000000ef0000000000060100000000e20000004000f30000000000f90000000000e20000000000a100000000006a0000000000a800000000006b00000000009800000000007f00000000007e00000000009400000000006a0000000000a800000000006d00000000009d0000000000640100000000cd0100000000740100000000f40000000000da0000000000330100000000fb0000000000af0000000000ba0000000000500100000000a90000000000af00000000008b0000000000be00000000001c0100000000c000000000009f0000000000d40000000000bc0000000000ac0000000000eb0000000000830000000000b50000000000570100000000720100000000d907000000004d0300000000560200000000bf0100000000140500000000ba0100000000640100000000f0000000ffffffffffffffffffffffffffffffffffff");
            
            mdBuf.append(GETable.S130.tableName);
            mdBuf.append("0002");//table length//Relay switch Table
            mdBuf.append("0100");
            
            mdBuf.append(GETable.M067.tableName);
            mdBuf.append("00BA");//table length//TRANS_RATIO  //불변
            mdBuf.append("00A0DB215D0000A0DB215D0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000A0DB215D000000000000000000000000000000000000000000000000000A000A0001003030303030303030303030300000000000003C001E000000000000202020");
            
            mdBuf.append(GETable.M070.tableName);
            mdBuf.append("002F");//table length//DISP_SCALAR//불변
            mdBuf.append("0200000000010000003333600000000000000000000000000000000000000000000000000000000020202020202020");
            
            mdBuf.append(GETable.M075.tableName);
            mdBuf.append("000C");//table length//순시값
            mdBuf.append("3617B030DD7001C40900C409");
            
            mdBuf.append(GETable.M078.tableName);
            mdBuf.append("0074");//table length//CUM_POWER_OUTAGE_SECS
            mdBuf.append("07061404354855414C4F4E472020200706140F0D4855414C4F4E4720202033000000000000000414");
            mdBuf.append("070A13140E000000000000000000573809000400");
            mdBuf.append("070A01090CA70000000000000000000000000000000000000000000000000000000000000000070702161D57270200020000000000000000");
                        
            mdBuf.append(GETable.M113.tableName);
            mdBuf.append("0005");//table length//RMS_VOLTAGE_PHA
            mdBuf.append("0609000062");
           
            mdBuf.append(GETable.B055.tableName);
            mdBuf.append("0009");           
            mdBuf.append("0a070d00080942010f");
            
            mdBuf.append(GETable.A055.tableName);
            mdBuf.append("0009");   
            mdBuf.append("0a070d00080a42010f");
            
            mdBuf.append(GETable.T001.tableName);
            mdBuf.append("002C");//table length////불변
            mdBuf.append("3100000031000000000000000000000000000000C8080000F79D00000F0400001EB1000009000000E90B0000");
            
            
            System.out.println("mdBuf.length()="+mdBuf.length());
            byte[] md = Hex.encode(mdBuf.toString());
            mdData.setMdData(md);
            mdData.setMcuId(MCUID);
            client.sendMD(mdData);
            client.close();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    //@Test
    public void test_kamstrup382() {
        try {
      	
            log.info("targetIp="+System.getProperty("targetIp") + ", port=" + System.getProperty("targetPort"));
            LANTarget target = new LANTarget(System.getProperty("targetIp"),Integer.parseInt(System.getProperty("targetPort")));
            target.setTargetId(MCUID);
            Client client = ClientFactory.getClient(target);
            
            MDData mdData = new MDData();
            mdData.setCnt(new WORD(1));
            String timestamp = DateTimeUtil.getDateString(new Date());
            byte[] year2 = DataUtil.get2ByteToInt(Integer.parseInt(timestamp.substring(0, 4)));
            DataUtil.convertEndian(year2);
            String hYear2 = Hex.decode(year2);
            //String hYear1 = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(2, 4)))});
            String hMonth = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(4, 6)))});
            String hDay = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(6, 8)))});
            String hHour = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(8, 10)))});
            String hMin = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(10, 12)))});
            String hSec = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(12, 14)))});
            
            StringBuffer mdBuf = new StringBuffer();
            String eui64 = "000D6F0000303586";
            String meterId = "3134323437303132000000000000000000000000";
            String sensorType = "01";
            String serviceType = "01";
            String vendor = "00";
            String dataCount = "0100";
            String length = "1301";
            
            mdBuf.append(eui64);
            mdBuf.append(meterId);
            mdBuf.append(sensorType);
            mdBuf.append(serviceType);
            mdBuf.append(vendor);
            mdBuf.append(dataCount);
            mdBuf.append(length);
            
            mdBuf.append(hYear2 + hMonth + hDay + hHour + hMin + hSec); // md data timestamp
            mdBuf.append("3C000000");
            mdBuf.append(hYear2 + hMonth + hDay + hHour + hMin + hSec);
            mdBuf.append("04370600010200");
        	
            // 하루전
            String preDay = DateTimeUtil.getPreDay(timestamp.substring(0,8));
            byte[] year3 = DataUtil.get2ByteToInt(Integer.parseInt(preDay.substring(0,4)));
            // DataUtil.convertEndian(year3);
            String hYear3 = Hex.decode(year3);
            String hMonth3 = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(preDay.substring(4,6)))});
            String hDay3 = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(preDay.substring(6,8)))});
            log.info("LPDate[" + hYear3+hMonth3+hDay3);
            mdBuf.append(hYear3+hMonth3+hDay3);
            mdBuf.append("00000FE9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
            mdBuf.append(hYear3+hMonth+hDay);
            mdBuf.append("00000FDB00000000000100000000000000010000000100000000000100010000000100000000000300040000000000010000000003E933040000D96464000102040000000FE9001302040000000FE9001702040000000000001B02040000000000001F0204000000000003EC2E040000002CDD003A00040000000000040C16044300000000040E30040000000000041E21020000ED041F21020000ED042021020000ED04342204420000007F04352204420000004B043622044200000000");
            
            byte[] md = Hex.encode(mdBuf.toString());
            mdData.setMdData(md);
            mdData.setMcuId(MCUID);
            client.sendMD(mdData);
            client.close();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    //@Test
    public enum GETable{

    	A055("41303535"),
    	B055("42303535"),
        S001("53303031"),
        S003("53303033"),
        S005("53303035"),
        S011("53303131"),
        S012("53303132"),
        S015("53303135"),
        S016("53303136"),
        S021("53303231"),
        S022("53303232"),
        S023("53303233"),
        S025("53303235"),
        S026("53303236"),
        S053("53303533"),
        S055("53303535"),
        S061("53303631"),
        S062("53303632"),
        S063("53303633"),
        S064("53303634"),
        S071("53303731"),
        S072("53303732"),
        S076("53303736"),
        S130("53313330"),
        S132("53313332"),
        M000("4D303030"),
        M013("4D303133"),
        M067("4D303637"),
        M070("4D303730"),
        M072("4D303732"),
        M075("4D303735"),
        M078("4D303738"),
        M113("4D313133"),
        N023("4E303233"),
        N025("4E303235"),
        N026("4E303236"),
        N067("4E303637"),
        N078("4E303738"),
        T001("54303031");

        private String tableName;
        
        GETable(String tableName) {
            this.tableName = tableName;
        }
        
        public String getTableName() {
            return this.tableName;
        }
    }
    
    @Ignore
    public void test_mk10E(){

    	try {
            log.info("targetIp="+System.getProperty("targetIp") + ", port=" + System.getProperty("targetPort"));
            // LANTarget target = new LANTarget(System.getProperty("targetIp"),Integer.parseInt(System.getProperty("targetPort")));
            LANTarget target = new LANTarget("187.1.10.58",8001);
            target.setTargetId(MCUID);
            Client client = ClientFactory.getClient(target);

            MDData mdData = new MDData();
            mdData.setCnt(new WORD(1));
            StringBuffer mdBuf = new StringBuffer();
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            mdBuf.append("323131333237373334000000312E34322000000188212E2E2E2E2E542E2E2E2E2E2E2E2E442E452E562E2E54432E2E482E2E2E4E442E0E0A0B01380C0E0A0B01380C00000001000000010000000100000001030004000002250D0A0B16060E0D0A0B16060E49537400426FE76D43556E980143558843558C8C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043554F9E4355635543557853408A624E408A13A9408A83E4435571EC0000000000000000");
            

            byte[] md = Hex.encode(mdBuf.toString());
            mdData.setMdData(md);
            mdData.setMcuId(MCUID);
            client.sendMD(mdData);
            client.close();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    //@Test
    public void test_hmu() {
        try {
            log.info("targetIp="+System.getProperty("targetIp") + ", port=" + System.getProperty("targetPort"));
            LANTarget target = new LANTarget(System.getProperty("targetIp"),Integer.parseInt(System.getProperty("targetPort")));
            target.setTargetId(MCUID);
            Client client = ClientFactory.getClient(target);
            
            MDData mdData = new MDData();
            mdData.setCnt(new WORD(1));
            String timestamp = DateTimeUtil.getDateString(new Date());
            // String timestamp = "23401203232032";
            byte[] year2 = DataUtil.get2ByteToInt(Integer.parseInt(timestamp.substring(0, 4)));
            String bigYear = Hex.decode(year2);
            DataUtil.convertEndian(year2);
            String hYear2 = Hex.decode(year2);
            //String hYear1 = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(2, 4)))});
            String hMonth = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(4, 6)))});
            String hDay = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(6, 8)))});
            String hHour = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(8, 10)))});
            String hMin = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(10, 12)))});
            String hSec = Hex.decode(new byte[]{DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(12, 14)))});
            
            StringBuffer mdBuf = new StringBuffer();
            mdBuf.append("000d6f0000e4abc7");
            mdBuf.append("0000000000000000000000000000000000000000");
            mdBuf.append("11");
            mdBuf.append("01");
            mdBuf.append("00");
            mdBuf.append("0100");
            mdBuf.append("fa00");
            mdBuf.append(hYear2 + hMonth + hDay + hHour + hMin + hSec); // md data timestamp
            mdBuf.append("021c0000");
            mdBuf.append(bigYear + hMonth + hDay + hHour + hMin + hSec);
            mdBuf.append("c00c");
            mdBuf.append("43a8");
            mdBuf.append("0000");
            mdBuf.append("0000");
            mdBuf.append("00");
            mdBuf.append("003110ee");
            mdBuf.append("00");
            mdBuf.append("04");
            mdBuf.append(bigYear + hMonth + hDay);
            mdBuf.append("002f609b");
            mdBuf.append("301010300000000001");
            mdBuf.append(bigYear + hMonth + hDay);
            mdBuf.append("002f609b");
            mdBuf.append("03350333032d032f033103320332033203330332");
            mdBuf.append("033403340334032e032b032b032a032a03290328");
            mdBuf.append("0329032903280329032603270327032703270329");
            mdBuf.append("0329032903290326032503240324032603270324");
            mdBuf.append("0326032403210328032d032e032c032c032d0330");
            mdBuf.append("0330032f032d032e032e032b032e032f03300331");
            mdBuf.append("0325032603260325032603260325032303290328");
            mdBuf.append("032b0331032e032f032f032f0330033103310331");
            mdBuf.append("0332033303330334033303280325032a032f0331");
            mdBuf.append("033403320333033403330328");
            
            byte[] md = Hex.encode(mdBuf.toString());
            mdData.setMdData(md);
            mdData.setMcuId(MCUID);
            client.sendMD(mdData);
            client.close();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @Ignore
    public void test_rdata_inventory() {
        try {
            // log.info("targetIp="+System.getProperty("targetIp") + ", port=" + System.getProperty("targetPort"));
            // LANTarget target = new LANTarget(System.getProperty("targetIp"),Integer.parseInt(System.getProperty("targetPort")));
            LANTarget target = new LANTarget("localhost",8001);
            target.setTargetId(MCUID);
            Client client = ClientFactory.getClient(target);
            
            RMDData rmdData = new RMDData();
            rmdData.setCnt(new WORD(1));
            String timestamp = DateTimeUtil.getDateString(new Date());
            byte[] year = DataUtil.get2ByteToInt(Integer.parseInt(timestamp.substring(0,4)));
            
            byte[] shortId = DataUtil.get4ByteToInt(1);
            byte idType = 0x04;
            byte[] id = DataUtil.getSMIValueByObject("mdID", "000D6F00005942EF").getVariable().encode();
            byte idLen = DataUtil.getByteToInt(id.length);
            byte portNum = DataUtil.getByteToInt(0);
            byte meterIdType = 0x21;
            byte[] meterId = DataUtil.getSMIValueByObject("mdSerial", "0000001").getVariable().encode();
            byte meterIdLen = DataUtil.getByteToInt(meterId.length);
            byte[] parserType = new byte[]{0x00, 0x00, 0x00, 0x0E};
            byte serviceType = 0x01;
            byte vendor = 0;
            byte[] model = DataUtil.getSMIValueByObject("mdSerial", "").getVariable().encode();
            byte modelLen = DataUtil.getByteToInt(model.length);
            byte[] hwVersion = new byte[] {0x01, 0x00};
            byte[] swVersion = new byte[] {0x01, 0x00};
            byte swBuild = DataUtil.getByteToInt(1);
            byte[] installDate = new byte[] {
                    year[0], year[1],
                    DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(4,6))),
                    DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(6,8))),
                    DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(8,10))),
                    DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(10,12))),
                    DataUtil.getByteToInt(Integer.parseInt(timestamp.substring(12,14)))
                };
            byte lpPeriod = DataUtil.getByteToInt(4);
            
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            bos.write(shortId);
            bos.write(idType);
            bos.write(idLen);
            bos.write(id);
            bos.write(portNum);
            bos.write(meterIdType);
            bos.write(meterIdLen);
            bos.write(meterId);
            bos.write(parserType);
            bos.write(serviceType);
            bos.write(vendor);
            bos.write(modelLen);
            bos.write(model);
            bos.write(hwVersion);
            bos.write(swVersion);
            bos.write(swBuild);
            bos.write(installDate);
            bos.write(lpPeriod);
            
            byte[] bx = bos.toByteArray();
            byte type = 0x01;
            byte[] paylen = DataUtil.get2ByteToInt(bx.length);
            
            bos = new ByteArrayOutputStream();
            bos.write(type);
            bos.write(paylen);
            bos.write(bx);
            rmdData.setrData(bos.toByteArray());
            log.info("RDData[" + Hex.decode(rmdData.getrData()) + "]");
            rmdData.setMcuId(MCUID);
            client.sendRMD(rmdData);
            client.close();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @Ignore
    public void test_rdata_metering() {
        try {
            // log.info("targetIp="+System.getProperty("targetIp") + ", port=" + System.getProperty("targetPort"));
            // LANTarget target = new LANTarget(System.getProperty("targetIp"),Integer.parseInt(System.getProperty("targetPort")));
            LANTarget target = new LANTarget("localhost",8001);
            target.setTargetId(MCUID);
            Client client = ClientFactory.getClient(target);
            
            Calendar cal = Calendar.getInstance();
            String today = DateTimeUtil.getDateString(cal.getTime());
            cal.add(Calendar.DAY_OF_MONTH, -1);
            String yesterday = DateTimeUtil.getDateString(cal.getTime());

            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            RMDData rmdData = new RMDData();
            rmdData.setCnt(new WORD(1));
            
            byte[] shortId = DataUtil.get4ByteToInt(1);
            bos.write(shortId);
            
            byte chCount = DataUtil.getByteToInt(6);
            bos.write(chCount);
            
            byte bpCount = DataUtil.getByteToInt(2);
            bos.write(bpCount);

            byte year = DataUtil.getByteToInt(Integer.parseInt(today.substring(0,4)) - 2000);
            byte today_month = DataUtil.getByteToInt(Integer.parseInt(today.substring(4,6)));
            byte today_day = DataUtil.getByteToInt(Integer.parseInt(today.substring(6,8)));
            byte today_hour = DataUtil.getByteToInt(Integer.parseInt(today.substring(8,10)));
            byte today_min = DataUtil.getByteToInt(Integer.parseInt(today.substring(10,12)));
            
            byte yester_month = DataUtil.getByteToInt(Integer.parseInt(yesterday.substring(4,6)));
            byte yester_day = DataUtil.getByteToInt(Integer.parseInt(yesterday.substring(6,8)));
            byte yester_hour = DataUtil.getByteToInt(Integer.parseInt(yesterday.substring(8,10)));
            byte yester_min = DataUtil.getByteToInt(Integer.parseInt(yesterday.substring(10,12)));
            
            // 1 last time
            bos.write(year);
            bos.write(yester_month);
            bos.write(yester_day);
            bos.write(yester_hour);
            bos.write(yester_min);
            // 1 base time
            bos.write(year);
            bos.write(yester_month);
            bos.write(yester_day);
            bos.write(yester_hour);
            bos.write(yester_min);
            
            byte[] lastValue = new byte[] {0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00};
            byte[] baseValue = new byte[] {0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00};
            for (int ch = 0; ch < (int)chCount; ch++) {
                // 1 last value
                bos.write(lastValue);
                // 1 base value
                bos.write(baseValue);
            }
            
            // 2 last time
            bos.write(year);
            bos.write(today_month);
            bos.write(today_day);
            bos.write(today_hour);
            bos.write(today_min);
            // 2 base time
            bos.write(year);
            bos.write(today_month);
            bos.write(today_day);
            bos.write(DataUtil.getByteToInt(0));
            bos.write(DataUtil.getByteToInt(0));
            for (int ch = 0; ch < (int)chCount; ch++) {
                // 2 last value
                bos.write(lastValue);
                // 2 base value
                bos.write(baseValue);
            }
            
            byte lpCount = DataUtil.getByteToInt(8);
            bos.write(lpCount);
            String lptime = null;
            cal.set(Calendar.HOUR_OF_DAY, 23);
            cal.set(Calendar.MINUTE, 00);
            DecimalFormat df = new DecimalFormat("#");
            for (int i = 0; i < (int)lpCount; i++) {
                lptime = DateTimeUtil.getDateString(cal.getTime());
                bos.write(DataUtil.getByteToInt(Integer.parseInt(lptime.substring(0,4))-2000));
                bos.write(DataUtil.getByteToInt(Integer.parseInt(lptime.substring(4,6))));
                bos.write(DataUtil.getByteToInt(Integer.parseInt(lptime.substring(6,8))));
                bos.write(DataUtil.getByteToInt(Integer.parseInt(lptime.substring(8,10))));
                bos.write(DataUtil.getByteToInt(Integer.parseInt(lptime.substring(10,12))));
                for (int ch = 0; ch < (int)chCount; ch++) {
                    bos.write(DataUtil.get4ByteToInt(Integer.parseInt(df.format((Math.random() * 1000)))));
                }
                cal.add(Calendar.MINUTE, 15);
            }
            // log count
            byte logCount = DataUtil.getByteToInt(0); 
            bos.write(logCount);
            
            byte[] bx = bos.toByteArray();
            byte type = 0x03;
            byte[] paylen = DataUtil.get2ByteToInt(bx.length);
            
            bos = new ByteArrayOutputStream();
            bos.write(type);
            bos.write(paylen);
            bos.write(bx);
            rmdData.setrData(bos.toByteArray());
            log.info("RDData[" + Hex.decode(rmdData.getrData()) + "]");
            rmdData.setMcuId(MCUID);
            client.sendRMD(rmdData);
            client.close();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @Ignore
    public void test_rdata_metering_1day() {
        try {
            // log.info("targetIp="+System.getProperty("targetIp") + ", port=" + System.getProperty("targetPort"));
            // LANTarget target = new LANTarget(System.getProperty("targetIp"),Integer.parseInt(System.getProperty("targetPort")));
            LANTarget target = new LANTarget("localhost",8001);
            target.setTargetId(MCUID);
            Client client = ClientFactory.getClient(target);
            
            Calendar cal = Calendar.getInstance();
            cal.add(Calendar.MINUTE, -15*8);
            String today = DateTimeUtil.getDateString(cal.getTime());

            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            RMDData rmdData = new RMDData();
            rmdData.setCnt(new WORD(1));
            
            byte[] shortId = DataUtil.get4ByteToInt(1);
            bos.write(shortId);
            
            byte chCount = DataUtil.getByteToInt(6);
            bos.write(chCount);
            
            byte bpCount = DataUtil.getByteToInt(1);
            bos.write(bpCount);

            byte year = DataUtil.getByteToInt(Integer.parseInt(today.substring(0,4)) - 2000);
            byte today_month = DataUtil.getByteToInt(Integer.parseInt(today.substring(4,6)));
            byte today_day = DataUtil.getByteToInt(Integer.parseInt(today.substring(6,8)));
            byte today_hour = DataUtil.getByteToInt(Integer.parseInt(today.substring(8,10)));
            byte today_min = DataUtil.getByteToInt(Integer.parseInt(today.substring(10,12)));
            
            byte[] lastValue = new byte[] {0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00};
            byte[] baseValue = new byte[] {0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00};
            
            // last time
            bos.write(year);
            bos.write(today_month);
            bos.write(today_day);
            bos.write(today_hour);
            bos.write(today_min);
            // base time
            bos.write(year);
            bos.write(today_month);
            bos.write(today_day);
            bos.write(today_hour);
            bos.write(today_min);
            for (int ch = 0; ch < (int)chCount; ch++) {
                // last value
                bos.write(lastValue);
                // base value
                bos.write(baseValue);
            }
            
            byte lpCount = DataUtil.getByteToInt(8);
            bos.write(lpCount);
            String lptime = null;
            // cal.set(Calendar.HOUR_OF_DAY, 0);
            int min = cal.get(Calendar.MINUTE);
            cal.set(Calendar.MINUTE, min-(min%15)+15);
            DecimalFormat df = new DecimalFormat("#");
            for (int i = 0; i < (int)lpCount; i++) {
                lptime = DateTimeUtil.getDateString(cal.getTime());
                bos.write(DataUtil.getByteToInt(Integer.parseInt(lptime.substring(0,4))-2000));
                bos.write(DataUtil.getByteToInt(Integer.parseInt(lptime.substring(4,6))));
                bos.write(DataUtil.getByteToInt(Integer.parseInt(lptime.substring(6,8))));
                bos.write(DataUtil.getByteToInt(Integer.parseInt(lptime.substring(8,10))));
                bos.write(DataUtil.getByteToInt(Integer.parseInt(lptime.substring(10,12))));
                for (int ch = 0; ch < (int)chCount; ch++) {
                    bos.write(DataUtil.get4ByteToInt(Integer.parseInt(df.format((Math.random() * 1000)))));
                }
                cal.add(Calendar.MINUTE, 15);
            }
            // log count
            byte logCount = DataUtil.getByteToInt(0); 
            bos.write(logCount);
            
            byte[] bx = bos.toByteArray();
            byte type = 0x03;
            byte[] paylen = DataUtil.get2ByteToInt(bx.length);
            
            bos = new ByteArrayOutputStream();
            bos.write(type);
            bos.write(paylen);
            bos.write(bx);
            rmdData.setrData(bos.toByteArray());
            log.info("RDData[" + Hex.decode(rmdData.getrData()) + "]");
            rmdData.setMcuId(MCUID);
            client.sendRMD(rmdData);
            client.close();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
}
