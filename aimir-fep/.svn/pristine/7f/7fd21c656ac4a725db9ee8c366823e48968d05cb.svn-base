package com.aimir.fep.protocol.fmp.frame.service.entry;

import javax.xml.bind.annotation.XmlTransient;

import com.aimir.fep.protocol.fmp.datatype.*;
import com.aimir.fep.protocol.fmp.frame.service.Entry;

/**
 * envEntry
 * generated by MIB Tool, Do not modify
 *
 * @author Y.S Kim (sorimo@nuritelecom.com)
 * @version $Rev: 1 $, $Date: 2005-11-21 15:59:15 +0900 $,
 */
public class envEntry extends Entry {

	public OCTET envKernelVersion = 
			new OCTET(64);

	public OCTET envGccVersion = 
			new OCTET(64);

	public OCTET envCpuName = 
			new OCTET(64);

	public UINT envCpuMips = 
			new UINT();

	@XmlTransient
	public OCTET getEnvKernelVersion()
	{
		 return this.envKernelVersion;
	}

	public void setEnvKernelVersion(OCTET envKernelVersion)
	{
		 this.envKernelVersion=envKernelVersion;
	}

	@XmlTransient
	public OCTET getEnvGccVersion()
	{
		 return this.envGccVersion;
	}

	public void setEnvGccVersion(OCTET envGccVersion)
	{
		 this.envGccVersion=envGccVersion;
	}

	@XmlTransient
	public OCTET getEnvCpuName()
	{
		 return this.envCpuName;
	}

	public void setEnvCpuName(OCTET envCpuName)
	{
		 this.envCpuName=envCpuName;
	}

	@XmlTransient
	public UINT getEnvCpuMips()
	{
		 return this.envCpuMips;
	}

	public void setEnvCpuMips(UINT envCpuMips)
	{
		 this.envCpuMips=envCpuMips;
	}


    public String toString()
    {
        StringBuffer sb = new StringBuffer();

		sb.append("CLASS["+this.getClass().getName()+"]\n");
		sb.append("envKernelVersion: " + envKernelVersion + "\n");
		sb.append("envGccVersion: " + envGccVersion + "\n");
		sb.append("envCpuName: " + envCpuName + "\n");
		sb.append("envCpuMips: " + envCpuMips + "\n");


        return sb.toString();
    }
}
