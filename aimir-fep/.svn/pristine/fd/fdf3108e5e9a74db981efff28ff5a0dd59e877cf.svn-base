package com.aimir.fep.protocol.fmp.processor;

import java.text.DateFormat;
import java.util.Date;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import com.aimir.constants.CommonConstants;
import com.aimir.fep.iot.controller.adapter.msgBridge.ContentInstanceInteractionHttpRequest;
import com.aimir.fep.iot.domain.common.RSCException;
import com.aimir.fep.iot.domain.resources.ContentInstance;
import com.aimir.fep.iot.domain.resources.DeviceInfo;
import com.aimir.fep.iot.domain.resources.Firmware;
import com.aimir.fep.iot.domain.resources.RemoteCSE;
import com.aimir.fep.iot.saver.ContentInstanceDataSaver;
import com.aimir.fep.iot.saver.RemoteCSEDataSaver;
import com.aimir.fep.iot.service.ContentInstanceService;
import com.aimir.fep.iot.service.RemoteCseService;
import com.aimir.fep.iot.utils.CommonUtil;
import com.aimir.fep.protocol.fmp.frame.service.MDData;
import com.aimir.fep.util.FMPProperty;
import com.aimir.model.device.CommLog;

/**
 * IoT Data를 IoTSensorData큐에 넣는다.
 * Queue Name : 
 * @author eunmiae
 *
 */

/**
 * 
 * IoTSensorDataProcessor
 * mq에 저장된 데이터 프로세스 처리 객체
 * 
 */
public class IoTSensorDataProcessor extends Processor {
	
	/** The logger. */
	private Logger logger = Logger.getLogger(this.getClass());
	//데이터 연계 획수 측정
	private static int sCount=0;
	private static Date sDate = new Date();
	private DateFormat dformat = DateFormat.getDateInstance(DateFormat.MEDIUM);
	
	private boolean rst = true;
	
	@Autowired
	ContentInstanceInteractionHttpRequest cntInsRequestHttp;
	
	@Autowired
	private ContentInstanceService cntInsService;
	
	@Autowired
    private RemoteCSEDataSaver saver;
	
    /**
     * constructor
     *
     * @throws Exception
     */
    public IoTSensorDataProcessor() throws Exception
    {
        // mdLogger = (MDLogger)ctx.getBean("mdLogger");
        // mdLogger.init();
    }

    /**
     * Dcu(G/W) save & update
     * @param data
     * @throws RSCException
     */
    private void saveRemoteCSEData(RemoteCSE data) throws RSCException
    {	
    	/**
    	 * duplication process & rawdata save
    	 */
    	String seq = data.getSeq();
    	if (Boolean.valueOf(FMPProperty.getProperty("iot.rawdataSaved"))) {
    		if(Boolean.valueOf(FMPProperty.getProperty("iot.duplProccess"))) {
    			logger.debug("### rawdata save : [" + data + "]");
    			
    			rst = cntInsService.rawDataSave(seq, data);
    		}
    	}
    	logger.debug("### RemoteCSE Rawdata Save end [" + rst + "]");
    	
    	if(!Boolean.valueOf(FMPProperty.getProperty("is.relay"))){
    		
    		saver.RemoteCSEDataSave(seq, data);
		}
    	
    	// 다음 연계 서버로 데이터 전송 (REST API REQUEST)
		/* 통합사회안전망에는 필요없음
		 * by ask
		 * if (Boolean.valueOf(GlobalProperties.getProperty("iot.http.enable"))){
			remoteCSERequestHttp.CSERegistrationHttpsMessage(data);
		}*/
    }
    
    /**
     * Dcu(G/W) data update
     * @param data
     * @throws RSCException
     */
    private void saveDeviceInfoData(DeviceInfo data) throws RSCException
    {	
    	/**
    	 * duplication process & rawdata save
    	 */
    	String seq = data.getSeq();
    	if (Boolean.valueOf(FMPProperty.getProperty("iot.rawdataSaved"))) {
    		if(Boolean.valueOf(FMPProperty.getProperty("iot.duplProccess"))) {   			
    			rst = cntInsService.rawDataSave(seq, data);
    		}
    	}
    	logger.debug("### DeviceInfo Rawdata Save End [" + rst + "]");
    	
    	if(!Boolean.valueOf(FMPProperty.getProperty("is.relay"))){	
    		saver.DeviceInfoDataUpdate(seq, data);
		}
    	
		/* 통합 플랫폼에서는 필요없는 로직 (by ask)
		 * if (Boolean.valueOf(GlobalProperties.getProperty("iot.http.enable"))){ // REST API로 데이터 Request
			deviceInfoRequestHttp.DeviceInfoRegistrationHttpsMessage(data);
		}*/
    }
    
    /**
     * Dcu(G/W) Firmware data update
     * @param data
     * @throws RSCException
     */
    private void saveFirmwareData(Firmware data) throws RSCException
    {	
    	/**
    	 * duplication process & rawdata save
    	 */
    	String seq = data.getSeq();
    	if (Boolean.valueOf(FMPProperty.getProperty("iot.rawdataSaved"))) {
    		if(Boolean.valueOf(FMPProperty.getProperty("iot.duplProccess"))) {   			
    			rst = cntInsService.rawDataSave(seq, data);
    		}
    	}
    	logger.debug("### Firmware Rawdata Save End [" + rst + "]");
    	
    	if(!Boolean.valueOf(FMPProperty.getProperty("is.relay"))){
    		saver.FirmwareDataUpdate(seq, data);
		}
    	
		/* 통합 플랫폼에서는 필요없는 로직 (by ask)
		 * if (Boolean.valueOf(GlobalProperties.getProperty("iot.http.enable"))){ // REST API로 데이터 Request
			firmwareRequestHttp.FirmwareRegistrationHttpsMessage(data);
		}*/
    }
    
    /**
     * ContentInstance data save & update
     * @param data
     * @throws RSCException
     */
    private void saveContentInstanceData(ContentInstance data) throws RSCException
    {
    	/**
    	 * duplication process & rawdata save
    	 */
    	String seq = data.getSeq();
    	if (Boolean.valueOf(FMPProperty.getProperty("iot.rawdataSaved"))) {
    		if(Boolean.valueOf(FMPProperty.getProperty("iot.duplProccess"))) {
    			logger.debug("### rawdata save : [" + data + "]");
    			
    			rst = cntInsService.rawDataSave(seq, data);
    		}
    	}
    	logger.debug("### ContentInstance Rawdata Save end [" + rst + "]");
    	
    	if(!Boolean.valueOf(FMPProperty.getProperty("is.relay"))){
			// remoteCSE가 존재하는지 체크한다.
			cntInsService.insertContentInstance(seq, data);
		}
    	
    	//사회안전망에서 운영서버로 보낼때 진입 프로세스
	    /* 통합 IoT에 필요없음 (by ask)
	     * if (Boolean.valueOf(FMPProperty.getProperty("iot.http.enable"))){ // REST API로 데이터 Request
			if(FMPProperty.getProperty("is.relay").equals("false")){
				if(dformat.format(sDate).equals(dformat.format(new Date()))){
					this.sCount= this.sCount+1;
				}else{
					sDate = new Date();
					this.sCount= 0;
				}
				cntInsService.increaseSendSensingCnt(sCount);
			}
	    	cntInsRequestHttp.ContentInstanceRegistrationHttpsMessage(data);
		}*/
    }

    /**
     * IoT Process
     * @param sdata
     * @throws Exception
     */
    public void iotProcessing(Object sdata) throws Exception
    {	
        if(sdata instanceof RemoteCSE)
        {
        	RemoteCSE remoteCSEData = (RemoteCSE)sdata;
            saveRemoteCSEData(remoteCSEData);
        }else if (sdata instanceof Firmware){
        	Firmware firmwareData = (Firmware)sdata;
        	saveFirmwareData(firmwareData);
        }else if (sdata instanceof DeviceInfo) {
        	DeviceInfo deviceInfoData = (DeviceInfo)sdata;
            saveDeviceInfoData(deviceInfoData);
        }else if (sdata instanceof ContentInstance){
        	ContentInstance contentInstanceData = (ContentInstance)sdata;
        	saveContentInstanceData(contentInstanceData);
        }else {
        	logger.debug("### processing data sdata does not ContentInstance ");
            return;
        }
    }
    
    public int processing(Object obj) throws Exception {
    	iotProcessing(obj);
		return 0;
	}
    
	@Override
	public void restore() throws Exception {
		// TODO Auto-generated method stub
		
	}
}
