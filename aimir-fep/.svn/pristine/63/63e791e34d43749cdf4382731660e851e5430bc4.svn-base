package com.aimir.fep.protocol.fmp.processor;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.ObjectMessage;
import javax.jms.Session;

import org.apache.activemq.ScheduledMessage;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jms.core.JmsTemplate;
import org.springframework.jms.core.MessageCreator;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Component;

import com.aimir.constants.CommonConstants;
import com.aimir.constants.CommonConstants.Interface;
import com.aimir.fep.iot.domain.resources.Resource;
import com.aimir.fep.protocol.fmp.log.CommLogger;
import com.aimir.fep.protocol.fmp.log.MDLogger;
import com.aimir.fep.util.DataUtil;
import com.aimir.fep.util.FMPProperty;
//import com.aimir.fep.util.iot.ResourceSerializer;
import com.aimir.model.device.CommLog;
import com.aimir.util.DateTimeUtil;

/**
 * Processor Handler
 *
 * @author D.J Park (dong7603@nuritelecom.com)
 * @version $Rev: 1 $, $Date: 2005-11-21 15:59:15 +0900 $,
 */
@Component
public class ProcessorHandler
{
    private static Log log = LogFactory.getLog(ProcessorHandler.class);
    public static String SERVICE_DATA = "ServiceData";
    public static String SERVICE_COMMAND = FMPProperty.getProperty("ServiceData.CommandData");
    public static String SERVICE_ALARM = FMPProperty.getProperty("ServiceData.AlarmData");
    public static String SERVICE_EVENT = FMPProperty.getProperty("ServiceData.EventData");
    public static String SERVICE_EVENT_1_2 = FMPProperty.getProperty("ServiceData.EventData_1_2");
    public static String SERVICE_FILE = FMPProperty.getProperty("ServiceData.FileData");
    public static String SERVICE_MEASUREMENTDATA = FMPProperty.getProperty("ServiceData.MDData");
    public static String SERVICE_NEWMEASUREMENTDATA = FMPProperty.getProperty("ServiceData.NDData");
    public static String SERVICE_DATAFILEDATA = FMPProperty.getProperty("ServiceData.DFData");
    public static String SERVICE_PLC = FMPProperty.getProperty("ServiceData.PLCData");
    public static String LOG_COMMLOG = FMPProperty.getProperty("LogData.CommLogData");
    public static String SERVICE_AMU_EVENT = FMPProperty.getProperty("ServiceData.AMUEventData");
    public static String SERVICE_AMU_METERING = FMPProperty.getProperty("ServiceData.AMUMDData");
    public static String SERVICE_REAL_MEASUREMENTDATA = FMPProperty.getProperty("ServiceData.RMDData");
    
    public static String SERVICE_EMNV_METERING = FMPProperty.getProperty("ServiceData.EMNVMDData");
    public static String SERVICE_EMNV_COMMAND = FMPProperty.getProperty("ServiceData.EMNVCommandData");

    public static String SERVICE_H_MDMSData = FMPProperty.getProperty("ServiceData.H.MDMSData");
    public static String SERVICE_B_MDMSData = FMPProperty.getProperty("ServiceData.B.MDMSData");
    public static String SERVICE_IOT_MDDATA = FMPProperty.getProperty("ServiceData.IoT.MDData");
    
    @Autowired
    private JmsTemplate jmsTemplate;
    
    /*@Autowired
    private KafkaProducer producer;*/
    
    @Autowired
    private KafkaIoTProducer kafkaIoTProducer;
    private KafkaTemplate<Integer, com.aimir.fep.util.Message> toKafka = null;
    public static String brokerAddress = FMPProperty.getProperty("kafka.broker.list");
    
    public void putServiceData(String serviceType, final Serializable data, Long delay) throws Exception {
    	jmsTemplate.send(serviceType, new MessageCreator() {
            public Message createMessage(Session session) throws JMSException {
//                return session.createObjectMessage(data);//
                ObjectMessage message = session.createObjectMessage(data);
                message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, delay * 1000);
                return message;
            }
        });
    }
    
    public void putServiceData(String serviceType, final Serializable data) throws Exception
    {	
    	log.debug("### Aimir3.6 putServiceData start ~~~ ### ["+data+"]");
        if (data instanceof com.aimir.fep.util.Message) {
            if (toKafka == null) {
                /*KafkaProducerMessageHandler<Integer, com.aimir.fep.util.Message> handler = 
                        (KafkaProducerMessageHandler<Integer, com.aimir.fep.util.Message>)producer.handler();
                toKafka = 
                        (KafkaTemplate<Integer, com.aimir.fep.util.Message>)handler.getKafkaTemplate();*/
            }
            
            log.debug("Try To Put Data to KafkaQueue ==> [" + serviceType + "][" + 
                    ((com.aimir.fep.util.Message)data).toString() + "]");
            toKafka.send(serviceType, (com.aimir.fep.util.Message)data);
            log.debug("Put Data to KafkaQueue ==> [" + serviceType + "][" + 
                    ((com.aimir.fep.util.Message)data).toString() + "]");
            
            CommLog commLog = makeCommLog((com.aimir.fep.util.Message)data, serviceType);
            CommLogger commLogger = DataUtil.getBean(CommLogger.class);
            commLogger.sendLog(commLog);
            
        } else {
			log.debug("Try to Put Data to ActiveMQueue ==> [" + serviceType + "][" + data.getClass().getName() + "]");
            // 2017.03.24 SP-629
            boolean enableMDFilelog = Boolean.parseBoolean(FMPProperty.getProperty("protocol.md.filelog.enable"));
            if (serviceType == ProcessorHandler.SERVICE_MEASUREMENTDATA && enableMDFilelog) {
                MDLogger mdlog = new MDLogger();
                final String filename = mdlog.writeObject(data);
                log.debug("Wrote MDData to LogFile[" + filename + "]");
                jmsTemplate.send(serviceType, new MessageCreator() {
                    public Message createMessage(Session session) throws JMSException {
                        return session.createObjectMessage(filename);
                    }
                });
                log.debug("Put MDData Filename[" + filename + "] to "+ serviceType);
            }
            else {
                jmsTemplate.send(serviceType, new MessageCreator() {
                    public Message createMessage(Session session) throws JMSException {
                        return session.createObjectMessage(data);
                    }
                });
                log.debug("Put Data to "+ serviceType);
            }
        }
    }
    
    public void putServiceIoTData(String serviceType, Serializable data) throws Exception
    {
    	if(data instanceof com.aimir.fep.iot.domain.resources.Resource && serviceType == ProcessorHandler.SERVICE_IOT_MDDATA) {
        	try {
        		log.debug("Try to Put Data to Kafka ==> :["+serviceType+"] ["+(Resource)data+"]");
        		
        		Map<String, Object> props = new HashMap<>();
                props = ProducerProperties(props);
                
                /*KafkaProducerMessageHandler<Integer, com.aimir.fep.util.Message> handler = 
                        (KafkaProducerMessageHandler<Integer, com.aimir.fep.util.Message>)producer.handler();
                toKafka = 
                        (KafkaTemplate<Integer, com.aimir.fep.util.Message>)handler.getKafkaTemplate();*/
                
                Producer<String, Resource> producer = new KafkaProducer<>(props);
				producer.send(new ProducerRecord<String, Resource>(serviceType, (Resource)data));
                
				producer.close();
        	} catch (Exception e) {
        		e.printStackTrace();
        	}
        } else {
           log.debug("Try to Put Data to ActiveMQueue ==> [" + serviceType + "][" + data.getClass().getName() + "]");
           
           jmsTemplate.send(serviceType, new MessageCreator() {
               public Message createMessage(Session session) throws JMSException {
                   return session.createObjectMessage(data);
               }
           });
       }
    }
    
    private Map<String, Object> ProducerProperties(Map<String, Object> props) throws Exception {
        //Map<String, Object> props = new HashMap<>();
        
    	props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, FMPProperty.getProperty("kafka.iot.broker.list"));
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        //props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ResourceSerializer.class);
        //props.put(ProducerConfig.RETRIES_CONFIG, 0);
        //props.put(ProducerConfig.MAX_REQUEST_SIZE_CONFIG, 2 * 1024 * 1024);
        //props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
        // props.put(ProducerConfig.BATCH_SIZE_CONFIG, 16*1024);
        // props.put(ProducerConfig.LINGER_MS_CONFIG, 1);
        // props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, 32 * 1024 * 1024);
        // props.put(ProducerConfig.ACKS_CONFIG, 1);
        // props.put(ProducerConfig.COMPRESSION_TYPE_CONFIG, "gzip");
        //props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);
        // props.put(ProducerConfig.PARTITIONER_CLASS_CONFIG, RoundRobinPartitioner.class);
		return props;
    }

    private CommLog makeCommLog(com.aimir.fep.util.Message msg, String serviceType) {
        CommLog commLog = new CommLog();
        
        // commLog.setNameSpace(msg.getNameSpace());
        // commLog.setData(frame.encode());
        // commLog.setDataType("ServiceData");
        commLog.setSenderIp(msg.getSenderIp());
        commLog.setSenderId(msg.getSenderId());
        commLog.setReceiverId(msg.getReceiverId());
        commLog.setReceiverTypeCode(CommonConstants.getSenderReceiver("1")); // FEP
        commLog.setSendBytes((int)msg.getSendBytes()); //ENQ+ACK
        commLog.setRcvBytes((int)msg.getRcvBytes());//included EOT that received
        commLog.setStartDateTime(msg.getStartDateTime());
        commLog.setStartDate(msg.getStartDateTime().substring(0,8));
        commLog.setStartTime(msg.getStartDateTime().substring(8,14));
        commLog.setEndTime(msg.getEndDateTime());
        commLog.setInterfaceCode(CommonConstants.getInterface(Interface.IF4.name()));
        commLog.setOperationCode(serviceType);
        // Communication Success
        commLog.setCommResult(1);
        log.debug("startTime["+commLog.getStartTime()+"] endTime["+commLog.getEndTime()+"]");
        try {
            long startLongTime = DateTimeUtil.getDateFromYYYYMMDDHHMMSS(commLog.getStartDateTime()).getTime();
            long endLongTime = DateTimeUtil.getDateFromYYYYMMDDHHMMSS(commLog.getEndTime()).getTime();
            
            if(endLongTime - startLongTime > 0) {
                commLog.setTotalCommTime((int)(endLongTime - startLongTime));
            }
            else {
                commLog.setTotalCommTime(0);
            }
        }
        catch (Exception e) {
            log.warn(e);
        }
        return commLog;
    }
}
